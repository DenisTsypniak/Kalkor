"""
–°–ø—Ä–æ—â–µ–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
"""

import asyncio
import logging
from typing import Optional

logger = logging.getLogger(__name__)

class SimpleSystemIntegrator:
    """–°–ø—Ä–æ—â–µ–Ω–∏–π —ñ–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º"""
    
    def __init__(self):
        self._initialized = False
        self._services = {}
    
    async def initialize_all_systems(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ —Å–∏—Å—Ç–µ–º–∏"""
        if self._initialized:
            return
        
        try:
            logger.info("Initializing optimization systems...")
            
            # 1. Database Pool
            try:
                from src.core.database_pool import get_db_pool
                db_pool = await get_db_pool()
                self._services['db_pool'] = db_pool
                logger.info("‚úÖ Database pool initialized")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Database pool failed: {e}")
            
            # 2. Animation Manager
            try:
                from src.utils.animation_manager import get_animation_manager
                animation_manager = get_animation_manager()
                self._services['animation_manager'] = animation_manager
                logger.info("‚úÖ Animation manager initialized")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Animation manager failed: {e}")
            
            # 3. Theme Manager
            try:
                from src.themes.theme_manager import get_theme_manager
                theme_manager = get_theme_manager()
                self._services['theme_manager'] = theme_manager
                logger.info("‚úÖ Theme manager initialized")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Theme manager failed: {e}")
            
            # 4. Performance Optimizer
            try:
                from src.utils.performance.optimizer import PerformanceOptimizer
                performance_optimizer = PerformanceOptimizer()
                self._services['performance_optimizer'] = performance_optimizer
                logger.info("‚úÖ Performance optimizer initialized")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Performance optimizer failed: {e}")
            
            # 5. Analytics Engine
            try:
                from src.utils.analytics_engine import AnalyticsEngine
                analytics_engine = AnalyticsEngine()
                self._services['analytics_engine'] = analytics_engine
                logger.info("‚úÖ Analytics engine initialized")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Analytics engine failed: {e}")
            
            # 6. Fallback Database Manager –≤–∏–¥–∞–ª–µ–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
            
            # 4. Image Loader
            try:
                from src.utils.lazy_image_loader import get_image_loader
                image_loader = get_image_loader()
                self._services['image_loader'] = image_loader
                logger.info("‚úÖ Image loader initialized")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Image loader failed: {e}")
            
            # 5. Metrics Collector
            try:
                from src.utils.metrics_collector import get_metrics_collector
                metrics_collector = get_metrics_collector()
                self._services['metrics_collector'] = metrics_collector
                logger.info("‚úÖ Metrics collector initialized")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Metrics collector failed: {e}")
            
            # 6. Error Handler
            try:
                from src.utils.error_handler import get_error_handler
                error_handler = get_error_handler()
                self._services['error_handler'] = error_handler
                logger.info("‚úÖ Error handler initialized")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Error handler failed: {e}")
            
            # 7. UI Responsiveness
            try:
                from src.utils.ui_responsiveness import get_ui_responsiveness_manager
                ui_manager = get_ui_responsiveness_manager()
                self._services['ui_manager'] = ui_manager
                logger.info("‚úÖ UI responsiveness manager initialized")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è UI responsiveness manager failed: {e}")
            
            # 8. Simple Validator
            try:
                from src.utils.validators import DataValidator
                validator = DataValidator()
                self._services['validator'] = validator
                logger.info("‚úÖ Simple validator initialized")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Simple validator failed: {e}")
            
            self._initialized = True
            logger.info("üéâ All available systems initialized!")
            
        except Exception as e:
            logger.error(f"‚ùå Error initializing systems: {e}")
            # –ù–µ –≤–∏–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –¥–æ–¥–∞—Ç–æ–∫ –º—ñ–≥ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –±–µ–∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ–π
    
    async def dispose_all_systems(self):
        """–ó–≤—ñ–ª—å–Ω—è—î –≤—Å—ñ —Å–∏—Å—Ç–µ–º–∏"""
        if not self._initialized:
            return
        
        try:
            logger.info("Disposing optimization systems...")
            
            # –ó–≤—ñ–ª—å–Ω—è—î–º–æ –≤ –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
            if 'metrics_collector' in self._services:
                try:
                    from src.utils.metrics_collector import dispose_metrics_collector
                    await dispose_metrics_collector()
                except Exception as e:
                    logger.warning(f"Error disposing metrics collector: {e}")
            
            if 'db_pool' in self._services:
                try:
                    from src.core.database_pool import close_db_pool
                    await close_db_pool()
                except Exception as e:
                    logger.warning(f"Error disposing database pool: {e}")
            
            self._services.clear()
            self._initialized = False
            logger.info("‚úÖ All systems disposed successfully!")
            
        except Exception as e:
            logger.error(f"‚ùå Error disposing systems: {e}")
    
    def get_service(self, service_name: str):
        """–û—Ç—Ä–∏–º—É—î —Å–µ—Ä–≤—ñ—Å –∑–∞ –Ω–∞–∑–≤–æ—é"""
        return self._services.get(service_name)
    
    def is_initialized(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Å–∏—Å—Ç–µ–º–∏"""
        return self._initialized
    
    def get_available_services(self) -> list:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
        return list(self._services.keys())

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä
_integrator: Optional[SimpleSystemIntegrator] = None

def get_integrator() -> SimpleSystemIntegrator:
    """–û—Ç—Ä–∏–º—É—î –≥–ª–æ–±–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä"""
    global _integrator
    if _integrator is None:
        _integrator = SimpleSystemIntegrator()
    return _integrator

async def initialize_optimization_systems():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó"""
    integrator = get_integrator()
    await integrator.initialize_all_systems()

async def dispose_optimization_systems():
    """–ó–≤—ñ–ª—å–Ω—è—î –≤—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó"""
    integrator = get_integrator()
    await integrator.dispose_all_systems()
