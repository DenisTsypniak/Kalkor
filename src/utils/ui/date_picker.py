"""
–ü—Ä–æ—Å—Ç–∏–π Date Picker –∑ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
"""
import flet as ft
from datetime import datetime, date, timedelta
from typing import Optional, Callable
import calendar


class ModernDatePicker(ft.Container):
    """–ü—Ä–æ—Å—Ç–∏–π date picker –∑ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º"""
    
    def __init__(
        self,
        label: str = "–î–∞—Ç–∞",
        initial_date: Optional[date] = None,
        on_date_changed: Optional[Callable[[date], None]] = None,
        page=None,
        mode: str = "add",  # "add" –∞–±–æ "edit"
        localization_manager=None,
        **kwargs
    ):
        super().__init__(**kwargs)
        
        self.label = label
        self.on_date_changed = on_date_changed
        self.page = page
        self.mode = mode
        self.localization_manager = localization_manager
        
        # –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞
        self.current_date = initial_date or date.today()
        self.display_date = date.today()  # –î–∞—Ç–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–ª—å–æ—Ä–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∂–∏–º—É
        if mode == "edit":
            self.primary_color = ft.Colors.AMBER_600
            self.primary_light = ft.Colors.AMBER_100
        else:  # add
            self.primary_color = ft.Colors.BLUE_600
            self.primary_light = ft.Colors.BLUE_100
        
        # –ú—ñ—Å—è—Ü—ñ —Ç–∞ –¥–Ω—ñ —Ç–∏–∂–Ω—è (–±—É–¥—É—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∑ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó)
        self.months = []
        self.weekdays = []
        
        # –°—Ç–∞–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–ø–æ–∫–∞–∑–∞–Ω–∏–π/–ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π)
        self.calendar_visible = False
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—é
        self._load_localization()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI
        self._build_ui()
        self._update_calendar()
    
    def _load_localization(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ç–µ–∫—Å—Ç–∏"""
        print(f"üîç Calendar: Loading localization...")
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ø–µ—Ä–µ–¥–∞–Ω—É –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—é
            if self.localization_manager:
                loc = self.localization_manager
                print(f"üîç Calendar: Using passed localization manager")
                self.months = loc.get("calendar_months", default=[
                    "–°—ñ—á–µ–Ω—å", "–õ—é—Ç–∏–π", "–ë–µ—Ä–µ–∑–µ–Ω—å", "–ö–≤—ñ—Ç–µ–Ω—å", "–¢—Ä–∞–≤–µ–Ω—å", "–ß–µ—Ä–≤–µ–Ω—å",
                    "–õ–∏–ø–µ–Ω—å", "–°–µ—Ä–ø–µ–Ω—å", "–í–µ—Ä–µ—Å–µ–Ω—å", "–ñ–æ–≤—Ç–µ–Ω—å", "–õ–∏—Å—Ç–æ–ø–∞–¥", "–ì—Ä—É–¥–µ–Ω—å"
                ])
                self.weekdays = loc.get("calendar_weekdays", default=["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–ù–¥"])
                print(f"üîç Calendar: Loaded months: {self.months[:3]}...")
                print(f"üîç Calendar: Loaded weekdays: {self.weekdays}")
            # –ü–æ—Ç—ñ–º –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—é –∑ app_state
            elif hasattr(self.page, 'app_state') and hasattr(self.page.app_state, 'localization_manager'):
                loc = self.page.app_state.localization_manager
                print(f"üîç Calendar: Found localization manager in app_state")
                self.months = loc.get("calendar_months", default=[
                    "–°—ñ—á–µ–Ω—å", "–õ—é—Ç–∏–π", "–ë–µ—Ä–µ–∑–µ–Ω—å", "–ö–≤—ñ—Ç–µ–Ω—å", "–¢—Ä–∞–≤–µ–Ω—å", "–ß–µ—Ä–≤–µ–Ω—å",
                    "–õ–∏–ø–µ–Ω—å", "–°–µ—Ä–ø–µ–Ω—å", "–í–µ—Ä–µ—Å–µ–Ω—å", "–ñ–æ–≤—Ç–µ–Ω—å", "–õ–∏—Å—Ç–æ–ø–∞–¥", "–ì—Ä—É–¥–µ–Ω—å"
                ])
                self.weekdays = loc.get("calendar_weekdays", default=["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–ù–¥"])
                print(f"üîç Calendar: Loaded months: {self.months[:3]}...")
                print(f"üîç Calendar: Loaded weekdays: {self.weekdays}")
            else:
                print(f"üîç Calendar: No localization manager found, using fallback")
                # Fallback –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É
                self.months = [
                    "–°—ñ—á–µ–Ω—å", "–õ—é—Ç–∏–π", "–ë–µ—Ä–µ–∑–µ–Ω—å", "–ö–≤—ñ—Ç–µ–Ω—å", "–¢—Ä–∞–≤–µ–Ω—å", "–ß–µ—Ä–≤–µ–Ω—å",
                    "–õ–∏–ø–µ–Ω—å", "–°–µ—Ä–ø–µ–Ω—å", "–í–µ—Ä–µ—Å–µ–Ω—å", "–ñ–æ–≤—Ç–µ–Ω—å", "–õ–∏—Å—Ç–æ–ø–∞–¥", "–ì—Ä—É–¥–µ–Ω—å"
                ]
                self.weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–ù–¥"]
        except Exception as e:
            print(f"üîç Calendar: Error loading localization: {e}")
            # Fallback –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É
            self.months = [
                "–°—ñ—á–µ–Ω—å", "–õ—é—Ç–∏–π", "–ë–µ—Ä–µ–∑–µ–Ω—å", "–ö–≤—ñ—Ç–µ–Ω—å", "–¢—Ä–∞–≤–µ–Ω—å", "–ß–µ—Ä–≤–µ–Ω—å",
                "–õ–∏–ø–µ–Ω—å", "–°–µ—Ä–ø–µ–Ω—å", "–í–µ—Ä–µ—Å–µ–Ω—å", "–ñ–æ–≤—Ç–µ–Ω—å", "–õ–∏—Å—Ç–æ–ø–∞–¥", "–ì—Ä—É–¥–µ–Ω—å"
            ]
            self.weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–ù–¥"]
    
    def update_localization(self):
        """–û–Ω–æ–≤–ª—é—î –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—é –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –º–æ–≤–∏"""
        print(f"üîç Calendar: Updating localization...")
        self._load_localization()
        self._update_calendar()
    
    def _build_ui(self):
        """–°—Ç–≤–æ—Ä—é—î UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é
        self.header = ft.Row([
            # –ö–Ω–æ–ø–∫–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º—ñ—Å—è—Ü—è
            ft.IconButton(
                icon=ft.Icons.CHEVRON_LEFT,
                on_click=self._prev_month,
                tooltip="–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å",
                icon_color=ft.Colors.WHITE
            ),
            # –ù–∞–∑–≤–∞ –º—ñ—Å—è—Ü—è —Ç–∞ —Ä–æ–∫—É
            ft.Text(
                "",
                size=16,
                weight=ft.FontWeight.BOLD,
                color=ft.Colors.WHITE,
                expand=True,
                text_align=ft.TextAlign.CENTER
            ),
            # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
            ft.IconButton(
                icon=ft.Icons.CHEVRON_RIGHT,
                on_click=self._next_month,
                tooltip="–ù–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å",
                icon_color=ft.Colors.WHITE
            )
        ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN)
        
        # –î–Ω—ñ —Ç–∏–∂–Ω—è
        self.weekdays_row = ft.Row([
            ft.Container(
                content=ft.Text(day, size=12, weight=ft.FontWeight.BOLD, color=ft.Colors.WHITE),
                width=40,
                height=30,
                alignment=ft.alignment.center,
                bgcolor=ft.Colors.with_opacity(0.3, ft.Colors.WHITE),
                border_radius=5
            ) for day in self.weekdays
        ], alignment=ft.MainAxisAlignment.SPACE_EVENLY)
        
        # –ö–∞–ª–µ–Ω–¥–∞—Ä
        self.calendar_grid = ft.Column(spacing=2)
        
        
        # –ö–∞–ª–µ–Ω–¥–∞—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.calendar_container = ft.Container(
            content=ft.Column([
                self.header,
                ft.Divider(height=10, color=ft.Colors.TRANSPARENT),
                self.weekdays_row,
                ft.Divider(height=5, color=ft.Colors.TRANSPARENT),
                self.calendar_grid
            ], spacing=0),
            bgcolor=ft.Colors.BLACK,
            border_radius=15,
            border=ft.border.all(1, ft.Colors.WHITE),
            padding=15,
            visible=False,
            shadow=ft.BoxShadow(
                spread_radius=1,
                blur_radius=15,
                color=ft.Colors.with_opacity(0.3, ft.Colors.WHITE),
                offset=ft.Offset(0, 5)
            )
        )
        
        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (—Ç—ñ–ª—å–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä, –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞)
        self.content = ft.Container(
            content=ft.Column([
                self.calendar_container
            ], spacing=10),
            width=520  # –û–±–º–µ–∂—É—î–º–æ —à–∏—Ä–∏–Ω—É
        )
    
    def _update_calendar(self):
        """–û–Ω–æ–≤–ª—é—î –∫–∞–ª–µ–Ω–¥–∞—Ä"""
        # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        month_text = f"{self.months[self.display_date.month - 1]} {self.display_date.year}"
        self.header.controls[1].value = month_text
        
        # –û—á–∏—â—É—î–º–æ –∫–∞–ª–µ–Ω–¥–∞—Ä
        self.calendar_grid.controls.clear()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞–ª–µ–Ω–¥–∞—Ä –Ω–∞ –º—ñ—Å—è—Ü—å
        cal = calendar.monthcalendar(self.display_date.year, self.display_date.month)
        
        for week in cal:
            week_row = ft.Row(spacing=2, alignment=ft.MainAxisAlignment.SPACE_EVENLY)
            
            for day in week:
                if day == 0:
                    # –ü–æ—Ä–æ–∂–Ω—è –∫–ª—ñ—Ç–∏–Ω–∫–∞
                    day_container = ft.Container(
                        width=40,
                        height=40,
                        bgcolor=ft.Colors.TRANSPARENT
                    )
                else:
                    day_date = date(self.display_date.year, self.display_date.month, day)
                    
                    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∏–ª—å
                    is_today = day_date == date.today()
                    is_selected = day_date == self.current_date
                    
                    if is_selected:
                        bg_color = self.primary_color
                        text_color = ft.Colors.WHITE
                        weight = ft.FontWeight.BOLD
                    elif is_today:
                        bg_color = self.primary_light
                        text_color = self.primary_color
                        weight = ft.FontWeight.BOLD
                    else:
                        bg_color = ft.Colors.TRANSPARENT
                        text_color = ft.Colors.WHITE
                        weight = ft.FontWeight.NORMAL
                    
                    day_container = ft.Container(
                        content=ft.Text(
                            str(day),
                            size=14,
                            color=text_color,
                            weight=weight
                        ),
                        width=40,
                        height=40,
                        bgcolor=bg_color,
                        border_radius=20,
                        alignment=ft.alignment.center,
                        on_click=lambda e, d=day_date: self._select_date(d)
                    )
                
                week_row.controls.append(day_container)
            
            self.calendar_grid.controls.append(week_row)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ UI
        if self.page:
            self.page.update()
    
    def _select_date(self, selected_date: date):
        """–í–∏–±–∏—Ä–∞—î –¥–∞—Ç—É"""
        self.current_date = selected_date
        self._update_calendar()
        self._hide_calendar()  # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∫–∞–ª–µ–Ω–¥–∞—Ä –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É
        
        if self.on_date_changed:
            self.on_date_changed(selected_date)
    
    def _toggle_calendar(self, e):
        """–ü–µ—Ä–µ–º–∏–∫–∞—î –≤–∏–¥–∏–º—ñ—Å—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        if self.calendar_visible:
            self._hide_calendar()
        else:
            self._show_calendar()
    
    def _show_calendar(self):
        """–ü–æ–∫–∞–∑—É—î –∫–∞–ª–µ–Ω–¥–∞—Ä"""
        self.calendar_visible = True
        self.calendar_container.visible = True
        if self.page:
            self.page.update()
    
    def _hide_calendar(self):
        """–ü—Ä–∏—Ö–æ–≤—É—î –∫–∞–ª–µ–Ω–¥–∞—Ä"""
        self.calendar_visible = False
        self.calendar_container.visible = False
        if self.page:
            self.page.update()
    
    def _prev_month(self, e):
        """–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å"""
        if not self.calendar_visible:
            return
        if self.display_date.month == 1:
            self.display_date = self.display_date.replace(year=self.display_date.year - 1, month=12)
        else:
            self.display_date = self.display_date.replace(month=self.display_date.month - 1)
        self._update_calendar()
    
    def _next_month(self, e):
        """–ù–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å"""
        if not self.calendar_visible:
            return
        if self.display_date.month == 12:
            self.display_date = self.display_date.replace(year=self.display_date.year + 1, month=1)
        else:
            self.display_date = self.display_date.replace(month=self.display_date.month + 1)
        self._update_calendar()
    
    
    def get_date_string(self) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ä—è–¥–∫–∞"""
        return self.current_date.strftime("%Y-%m-%d")
    
    def set_date_from_string(self, date_string: str):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –¥–∞—Ç—É –∑ —Ä—è–¥–∫–∞"""
        try:
            self.current_date = datetime.strptime(date_string, "%Y-%m-%d").date()
            self.display_date = self.current_date
            self._update_calendar()
        except ValueError:
            pass
    
    def set_date(self, new_date: date):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –¥–∞—Ç—É"""
        self.current_date = new_date
        self.display_date = new_date
        self._update_calendar()

# –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
IOSDatePicker = ModernDatePicker
