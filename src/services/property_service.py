import logging
from typing import List, Dict, Optional, Tuple
from dataclasses import dataclass
from PIL import Image
import io
import base64

from src.data import data_manager as dm
from src.utils.config import TRANSACTION_TYPE_EXPENSE, TRANSACTION_TYPE_INCOME, PROPERTY_PURCHASE_CATEGORY, PROPERTY_SALE_CATEGORY

logger = logging.getLogger(__name__)

@dataclass
class PropertyData:
    """–ú–æ–¥–µ–ª—å –¥–∞–Ω–∏—Ö –¥–ª—è –º–∞–π–Ω–∞"""
    name: str
    price: float
    image_b64: Optional[str] = None
    property_id: Optional[int] = None
    purchase_date: Optional[str] = None
    
    def validate(self) -> List[str]:
        """–í–∞–ª—ñ–¥—É—î –¥–∞–Ω—ñ –º–∞–π–Ω–∞"""
        errors = []
        if not self.name or not self.name.strip():
            errors.append("–ù–∞–∑–≤–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é")
        if self.price <= 0:
            errors.append("–¶—ñ–Ω–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0")
        if len(self.name.strip()) > 100:
            errors.append("–ù–∞–∑–≤–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª—ñ–≤)")
        return errors

class PropertyService:
    """–°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –º–∞–π–Ω–æ–º"""
    
    def __init__(self, data_manager):
        self.dm = data_manager
    
    @staticmethod
    def compress_image(image_data: bytes, max_size: int = 800, quality: int = 85) -> bytes:
        """–°—Ç–∏—Å–∫–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ —Ä–æ–∑—É–º–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É"""
        try:
            img = Image.open(io.BytesIO(image_data))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ RGB —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if img.mode in ('RGBA', 'LA', 'P'):
                img = img.convert('RGB')
            
            # –ó–º–µ–Ω—à—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if max(img.size) > max_size:
                img.thumbnail((max_size, max_size), Image.Resampling.LANCZOS)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é
            buffer = io.BytesIO()
            img.save(buffer, format='JPEG', quality=quality, optimize=True)
            return buffer.getvalue()
        except Exception as e:
            logger.error(f"Error compressing image: {e}")
            return image_data
    
    @staticmethod
    def image_to_base64(image_data: bytes) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ Base64"""
        try:
            compressed_data = PropertyService.compress_image(image_data)
            b64 = base64.b64encode(compressed_data).decode("utf-8")
            return f"data:image/jpeg;base64,{b64}"
        except Exception as e:
            logger.error(f"Error converting image to base64: {e}")
            return ""
    
    async def add_property(self, profile_id: int, property_data: PropertyData) -> int:
        """–î–æ–¥–∞—î –Ω–æ–≤–µ –º–∞–π–Ω–æ"""
        try:
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
            errors = property_data.validate()
            if errors:
                raise ValueError("; ".join(errors))
            
            # –î–æ–¥–∞—î–º–æ –º–∞–π–Ω–æ
            new_id = await self.dm.add_property(
                profile_id=profile_id,
                name=property_data.name.strip(),
                price=property_data.price,
                image_b64=property_data.image_b64 or "",
                purchase_date=property_data.purchase_date
            )
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –ø–æ–∫—É–ø–∫–∏
            purchase_desc = f"–ü–æ–∫—É–ø–∫–∞ –º–∞–π–Ω–∞: {property_data.name}"
            await self.dm.add_transaction(
                profile_id=profile_id,
                trans_type=TRANSACTION_TYPE_EXPENSE,
                category=PROPERTY_PURCHASE_CATEGORY,
                description=purchase_desc,
                amount=property_data.price,
            )
            
            logger.info(f"Property '{property_data.name}' added successfully")
            return new_id
            
        except Exception as e:
            logger.error(f"Error adding property: {e}")
            raise
    
    async def update_property(self, property_id: int, property_data: PropertyData) -> bool:
        """–û–Ω–æ–≤–ª—é—î —ñ—Å–Ω—É—é—á–µ –º–∞–π–Ω–æ"""
        try:
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
            errors = property_data.validate()
            if errors:
                raise ValueError("; ".join(errors))
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –º–∞–π–Ω–∞
            old_property = await self.dm.get_property(property_id)
            if not old_property:
                raise ValueError("–ú–∞–π–Ω–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –º–∞–π–Ω–æ
            await self.dm.update_property(
                property_id,
                name=property_data.name.strip(),
                price=property_data.price,
                image_b64=property_data.image_b64 or "",
                purchase_date=property_data.purchase_date
            )
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –ø–æ–∫—É–ø–∫–∏ —è–∫—â–æ –∑–º—ñ–Ω–∏–ª–∞—Å—è —Ü—ñ–Ω–∞
            if old_property['price'] != property_data.price:
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –ø–æ–∫—É–ø–∫–∏
                txns = await self.dm.load_transactions(old_property['profile_id'], limit=1000)
                for txn in txns:
                    description = txn.get("description") or ""
                    category = txn.get("category") or ""
                    if (category == PROPERTY_PURCHASE_CATEGORY and 
                        f"–ü–æ–∫—É–ø–∫–∞ –º–∞–π–Ω–∞: {old_property['name']}" in description):
                        # –û–Ω–æ–≤–ª—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –∑ –Ω–æ–≤–æ—é —Ü—ñ–Ω–æ—é
                        await self.dm.update_transaction(
                            txn.get("id"),
                            amount=property_data.price,
                            description=f"–ü–æ–∫—É–ø–∫–∞ –º–∞–π–Ω–∞: {property_data.name.strip()}"
                        )
                        break
            
            logger.info(f"Property '{property_data.name}' updated successfully")
            return True
            
        except Exception as e:
            logger.error(f"Error updating property: {e}")
            raise
    
    async def sell_property(self, property_id: int, selling_price: float, notes: str = "") -> bool:
        """–ü—Ä–æ–¥–∞—î –º–∞–π–Ω–æ"""
        try:
            if selling_price <= 0:
                raise ValueError("–¶—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –º–∞–π–Ω–∞
            property_info = await self.dm.get_property(property_id)
            if not property_info:
                raise ValueError("–ú–∞–π–Ω–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
            # –ü—Ä–æ–¥–∞—î–º–æ –º–∞–π–Ω–æ
            await self.dm.sell_property(property_id, selling_price)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –ø—Ä–æ–¥–∞–∂—É
            sale_desc = notes or f"–ü—Ä–æ–¥–∞–∂ –º–∞–π–Ω–∞: {property_info['name']}"
            await self.dm.add_transaction(
                profile_id=property_info['profile_id'],
                trans_type=TRANSACTION_TYPE_INCOME,
                category=PROPERTY_SALE_CATEGORY,
                description=sale_desc,
                amount=selling_price,
            )
            
            logger.info(f"Property '{property_info['name']}' sold successfully")
            return True
            
        except Exception as e:
            logger.error(f"Error selling property: {e}")
            raise
    
    async def delete_property(self, property_id: int) -> bool:
        """–í–∏–¥–∞–ª—è—î –º–∞–π–Ω–æ —Ç–∞ –ø–æ–≤'—è–∑–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
        try:
            logger.info(f"üîÑ Attempting to delete property with ID: {property_id}")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –º–∞–π–Ω–∞
            property_info = await self.dm.get_property(property_id)
            if not property_info:
                logger.error(f"‚ùå Property with ID {property_id} not found in database")
                raise ValueError("–ú–∞–π–Ω–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
            logger.info(f"‚úÖ Found property: {property_info.get('name', 'Unknown')} (ID: {property_id})")
            
            # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤'—è–∑–∞–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            property_name = property_info['name']
            txns = await self.dm.load_transactions(property_info['profile_id'], limit=1000)
            for txn in txns:
                description = txn.get("description") or ""
                category = txn.get("category") or ""
                # –í–∏–¥–∞–ª—è—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –ø–æ–∫—É–ø–∫–∏ —Ç–∞ –ø—Ä–æ–¥–∞–∂—É –¥–ª—è —Ü—å–æ–≥–æ –º–∞–π–Ω–∞
                if (category == PROPERTY_PURCHASE_CATEGORY and f"–ü–æ–∫—É–ø–∫–∞ –º–∞–π–Ω–∞: {property_name}" in description) or \
                   (category == PROPERTY_SALE_CATEGORY and f"–ü—Ä–æ–¥–∞–∂ –º–∞–π–Ω–∞: {property_name}" in description):
                    await self.dm.delete_transaction(txn.get("id"))
            
            # –í–∏–¥–∞–ª—è—î–º–æ –º–∞–π–Ω–æ
            await self.dm.delete_property_permanently(property_id)
            
            logger.info(f"‚úÖ Property '{property_info['name']}' deleted successfully")
            return True
            
        except Exception as e:
            logger.error(f"Error deleting property: {e}")
            raise

    async def restore_property(self, property_id: int) -> bool:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –º–∞–π–Ω–æ –∑ –ø—Ä–æ–¥–∞–Ω–æ–≥–æ –≤ –∞–∫—Ç–∏–≤–Ω–µ"""
        try:
            logger.info(f"üîÑ PropertyService.restore_property called for ID: {property_id}")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –º–∞–π–Ω–∞
            property_info = await self.dm.get_property(property_id)
            if not property_info:
                logger.error(f"‚ùå Property not found for ID: {property_id}")
                raise ValueError("–ú–∞–π–Ω–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
            logger.info(f"‚úÖ Property found: {property_info.get('name', 'Unknown')} (status: {property_info.get('status')})")
            
            if property_info.get("status") != "sold":
                logger.error(f"‚ùå Property status is not 'sold': {property_info.get('status')}")
                raise ValueError("–ú–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø—Ä–æ–¥–∞–Ω–µ –º–∞–π–Ω–æ")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –ø—Ä–æ–¥–∞–∂
            selling_price = float(property_info.get("selling_price") or 0)
            sold_timestamp = property_info.get("sold_timestamp")
            logger.info(f"‚úÖ Property was sold for: {selling_price} at {sold_timestamp}")
            
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–∞–π–Ω–æ –≤ –∞–∫—Ç–∏–≤–Ω–µ
            logger.info(f"üîÑ Calling data_manager.restore_property for ID: {property_id}")
            await self.dm.restore_property(property_id)
            logger.info("‚úÖ Property status updated in database")
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –ø—Ä–æ–¥–∞–∂—É
            property_name = property_info['name']
            logger.info(f"üîÑ Looking for sale transaction for property: {property_name}")
            txns = await self.dm.load_transactions(property_info['profile_id'], limit=1000)
            
            sale_transaction_found = False
            for txn in txns:
                description = txn.get("description") or ""
                category = txn.get("category") or ""
                if category == PROPERTY_SALE_CATEGORY and f"–ü—Ä–æ–¥–∞–∂ –º–∞–π–Ω–∞: {property_name}" in description:
                    logger.info(f"üîÑ Found sale transaction: {txn.get('id')}")
                    await self.dm.delete_transaction(txn.get("id"))
                    sale_transaction_found = True
                    logger.info("‚úÖ Sale transaction deleted")
                    break
            
            if not sale_transaction_found:
                logger.warning("‚ö†Ô∏è No sale transaction found to delete")
            
            logger.info(f"‚úÖ Property '{property_info['name']}' restored successfully")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error restoring property: {e}")
            raise
    
    async def get_properties(self, profile_id: int, status: str = "active") -> List[Dict]:
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –º–∞–π–Ω–∞ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é"""
        try:
            return await self.dm.load_properties(profile_id, status=status)
        except Exception as e:
            logger.error(f"Error loading properties: {e}")
            raise
    
    async def update_properties_order(self, profile_id: int, property_ids: List[int]) -> bool:
        """–û–Ω–æ–≤–ª—é—î –ø–æ—Ä—è–¥–æ–∫ –º–∞–π–Ω–∞"""
        try:
            await self.dm.update_properties_order(profile_id, property_ids)
            return True
        except Exception as e:
            logger.error(f"Error updating properties order: {e}")
            raise
    
    async def update_sold_properties_order(self, profile_id: int, sold_properties: List[Dict]) -> bool:
        """–û–Ω–æ–≤–ª—é—î –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–¥–∞–Ω–æ–≥–æ –º–∞–π–Ω–∞"""
        try:
            property_ids = [prop.get("id") for prop in sold_properties if prop.get("id")]
            await self.dm.update_sold_properties_order(profile_id, property_ids)
            return True
        except Exception as e:
            logger.error(f"Error updating sold properties order: {e}")
            raise
    
    async def get_property_summary(self, profile_id: int) -> Dict[str, float]:
        """–û—Ç—Ä–∏–º—É—î –ø—ñ–¥—Å—É–º–æ–∫ –ø–æ –º–∞–π–Ω—É"""
        try:
            active_props = await self.dm.load_properties(profile_id, status="active")
            sold_props = await self.dm.load_properties(profile_id, status="sold")
            
            active_total = sum(float(p.get("price") or 0) for p in active_props)
            sold_total = sum(float(p.get("selling_price") or 0) for p in sold_props)
            
            return {
                "active_total": active_total,
                "sold_total": sold_total,
                "active_count": len(active_props),
                "sold_count": len(sold_props)
            }
        except Exception as e:
            logger.error(f"Error getting property summary: {e}")
            raise
