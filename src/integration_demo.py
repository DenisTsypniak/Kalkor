"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –Ω–æ–≤–∏—Ö —Å–∏—Å—Ç–µ–º –∑ –æ—Å–Ω–æ–≤–Ω–∏–º –¥–æ–¥–∞—Ç–∫–æ–º
"""

import asyncio
import flet as ft
from src.core.integration import get_integrator

class IntegrationDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –Ω–æ–≤–∏—Ö —Å–∏—Å—Ç–µ–º"""
    
    def __init__(self, page: ft.Page):
        self.page = page
        self.integrator = get_integrator()
    
    async def show_integration_status(self):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç—É—Å —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º"""
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–∞—Ç—É—Å—É
        status_container = ft.Container(
            content=ft.Column([
                ft.Text("üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó", size=20, weight=ft.FontWeight.BOLD),
                ft.Divider(),
                
                # Database Pool
                ft.Row([
                    ft.Icon(ft.Icons.DATABASE, color=ft.Colors.BLUE),
                    ft.Text("Connection Pooling: ", size=16),
                    ft.Text("‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π" if self.integrator.get_service('db_pool') else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π", 
                           color=ft.Colors.GREEN if self.integrator.get_service('db_pool') else ft.Colors.RED)
                ]),
                
                # Animation Manager
                ft.Row([
                    ft.Icon(ft.Icons.ANIMATION, color=ft.Colors.PURPLE),
                    ft.Text("Animation Manager: ", size=16),
                    ft.Text("‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π" if self.integrator.get_service('animation_manager') else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π",
                           color=ft.Colors.GREEN if self.integrator.get_service('animation_manager') else ft.Colors.RED)
                ]),
                
                # Theme Manager
                ft.Row([
                    ft.Icon(ft.Icons.PALETTE, color=ft.Colors.ORANGE),
                    ft.Text("Theme Manager: ", size=16),
                    ft.Text("‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π" if self.integrator.get_service('theme_manager') else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π",
                           color=ft.Colors.GREEN if self.integrator.get_service('theme_manager') else ft.Colors.RED)
                ]),
                
                # Error Handler
                ft.Row([
                    ft.Icon(ft.Icons.ERROR_OUTLINE, color=ft.Colors.RED),
                    ft.Text("Error Handler: ", size=16),
                    ft.Text("‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π" if self.integrator.get_service('error_handler') else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π",
                           color=ft.Colors.GREEN if self.integrator.get_service('error_handler') else ft.Colors.RED)
                ]),
                
                # Metrics Collector
                ft.Row([
                    ft.Icon(ft.Icons.ANALYTICS, color=ft.Colors.TEAL),
                    ft.Text("Metrics Collector: ", size=16),
                    ft.Text("‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π" if self.integrator.get_service('metrics_collector') else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π",
                           color=ft.Colors.GREEN if self.integrator.get_service('metrics_collector') else ft.Colors.RED)
                ]),
                
                # Backup Manager
                ft.Row([
                    ft.Icon(ft.Icons.BACKUP, color=ft.Colors.INDIGO),
                    ft.Text("Backup Manager: ", size=16),
                    ft.Text("‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π" if self.integrator.get_service('backup_manager') else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π",
                           color=ft.Colors.GREEN if self.integrator.get_service('backup_manager') else ft.Colors.RED)
                ]),
                
                ft.Divider(),
                
                # –ö–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
                ft.Row([
                    ft.ElevatedButton(
                        "üé® –¢–µ—Å—Ç –∞–Ω—ñ–º–∞—Ü—ñ—ó",
                        on_click=self._test_animation,
                        bgcolor=ft.Colors.PURPLE_400
                    ),
                    ft.ElevatedButton(
                        "üé≠ –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É",
                        on_click=self._change_theme,
                        bgcolor=ft.Colors.ORANGE_400
                    ),
                    ft.ElevatedButton(
                        "üìä –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏",
                        on_click=self._show_metrics,
                        bgcolor=ft.Colors.TEAL_400
                    )
                ], alignment=ft.MainAxisAlignment.SPACE_EVENLY)
                
            ]),
            padding=20,
            bgcolor=ft.Colors.GREY_900,
            border_radius=10,
            width=600
        )
        
        return status_container
    
    async def _test_animation(self, e):
        """–¢–µ—Å—Ç—É—î –∞–Ω—ñ–º–∞—Ü—ñ—ó"""
        animation_manager = self.integrator.get_service('animation_manager')
        if animation_manager:
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            test_container = ft.Container(
                width=100,
                height=100,
                bgcolor=ft.Colors.BLUE,
                border_radius=10
            )
            
            self.page.add(test_container)
            
            # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ –∞–Ω—ñ–º–∞—Ü—ñ—ó
            animation_manager.fade_in(test_container, duration=0.5)
            await asyncio.sleep(0.6)
            
            animation_manager.bounce(test_container, duration=0.6)
            await asyncio.sleep(0.7)
            
            animation_manager.fade_out(test_container, duration=0.3)
            await asyncio.sleep(0.4)
            
            self.page.controls.remove(test_container)
            self.page.update()
    
    async def _change_theme(self, e):
        """–ó–º—ñ–Ω—é—î —Ç–µ–º—É"""
        theme_manager = self.integrator.get_service('theme_manager')
        if theme_manager:
            current_theme = theme_manager.get_current_theme()
            if current_theme and current_theme.name == "Dark":
                theme_manager.set_theme("blue")
            else:
                theme_manager.set_theme("dark")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ UI
            self.page.bgcolor = theme_manager.get_color("background")
            self.page.update()
    
    async def _show_metrics(self, e):
        """–ü–æ–∫–∞–∑—É—î –º–µ—Ç—Ä–∏–∫–∏"""
        metrics_collector = self.integrator.get_service('metrics_collector')
        if metrics_collector:
            report = metrics_collector.generate_report()
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥—ñ–∞–ª–æ–≥ –∑ –º–µ—Ç—Ä–∏–∫–∞–º–∏
            metrics_dialog = ft.AlertDialog(
                title=ft.Text("üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"),
                content=ft.Container(
                    content=ft.Column([
                        ft.Text(f"–û–ø–µ—Ä–∞—Ü—ñ—ó: {len(report.get('operation_stats', {}))}"),
                        ft.Text(f"–°–∏—Å—Ç–µ–º–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏: {'‚úÖ' if report.get('system_summary') else '‚ùå'}"),
                        ft.Text(f"UI –º–µ—Ç—Ä–∏–∫–∏: {'‚úÖ' if report.get('ui_summary') else '‚ùå'}"),
                        ft.Text(f"–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {'‚úÖ' if report.get('performance_summary') else '‚ùå'}")
                    ], height=200),
                    width=400
                ),
                actions=[
                    ft.TextButton("–ó–∞–∫—Ä–∏—Ç–∏", on_click=lambda e: self._close_dialog(metrics_dialog))
                ]
            )
            
            self.page.overlay.append(metrics_dialog)
            metrics_dialog.open = True
            self.page.update()
    
    def _close_dialog(self, dialog):
        """–ó–∞–∫—Ä–∏–≤–∞—î –¥—ñ–∞–ª–æ–≥"""
        dialog.open = False
        self.page.overlay.remove(dialog)
        self.page.update()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–µ–º–æ –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É
async def add_integration_demo_to_app(app_instance):
    """–î–æ–¥–∞—î –¥–µ–º–æ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É"""
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ–º–æ
    demo = IntegrationDemo(app_instance.page)
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–µ–º–æ –¥–æ UI
    demo_button = ft.ElevatedButton(
        "üîß –°–∏—Å—Ç–µ–º–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó",
        on_click=lambda e: _show_integration_demo(demo),
        bgcolor=ft.Colors.INDIGO_400,
        icon=ft.Icons.SETTINGS
    )
    
    return demo_button

async def _show_integration_demo(demo):
    """–ü–æ–∫–∞–∑—É—î –¥–µ–º–æ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó"""
    status_container = await demo.show_integration_status()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥—ñ–∞–ª–æ–≥
    demo_dialog = ft.AlertDialog(
        title=ft.Text("üîß –°–∏—Å—Ç–µ–º–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó"),
        content=status_container,
        actions=[
            ft.TextButton("–ó–∞–∫—Ä–∏—Ç–∏", on_click=lambda e: demo._close_dialog(demo_dialog))
        ]
    )
    
    demo.page.overlay.append(demo_dialog)
    demo_dialog.open = True
    demo.page.update()
