import flet as ft
import base64
from typing import Callable, Optional, List
import asyncio
import os

from src.app.app_state import AppState
from src.data import data_manager as dm
from src.utils.localization import LocalizationManager
from src.utils import config as cfg
from src.utils.ui.helpers import (
    format_number, BaseDialog, SafeAsyncExecutor, 
    BUTTON_STYLE_PRIMARY, BUTTON_STYLE_SECONDARY, BUTTON_STYLE_DANGER,
    TEXT_FIELD_STYLE, create_loading_indicator, create_error_message
)
from src.utils.ui.date_picker import ModernDatePicker
from src.services.property_service import PropertyService, PropertyData
from src.utils.drag_drop_manager import DragDropManager
from src.views.base_view import BaseView

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–æ–≤—ñ —Å–∏—Å—Ç–µ–º–∏
from src.utils.logger import get_logger
from src.utils.error_handler import handle_errors
from src.utils.validators import DataValidator

# –Ü–º–ø–æ—Ä—Ç lazy image loader
try:
    from src.utils.lazy_image_loader import get_image_loader
    LAZY_LOADER_ENABLED = True
except ImportError:
    LAZY_LOADER_ENABLED = False


logger = get_logger(__name__)


class PropertiesView(BaseView):
    """Modern Properties view: horizontal active list with DnD, sold list, add/edit/sell, totals, and transaction integration."""

    # –ë–∞–∑–æ–≤—ñ —Ä–æ–∑–º—ñ—Ä–∏ –∫–∞—Ä—Ç–æ—á–æ–∫
    BASE_CARD_HEIGHT = 280
    BASE_CARD_WIDTH = 220
    BASE_IMG_WIDTH = 160
    GAP = 10
    
    # –ü–æ—Ç–æ—á–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ (–±—É–¥—É—Ç—å —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω—ñ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ)
    CARD_HEIGHT = BASE_CARD_HEIGHT
    CARD_WIDTH = BASE_CARD_WIDTH
    IMG_WIDTH = BASE_IMG_WIDTH

    def __init__(self, app_state: AppState, loc: LocalizationManager):
        super().__init__(app_state, loc, visible=True, expand=True)
        self.selected_tab = "active"  # "active" | "sold"
        self._is_built = False
        self._update_lock = asyncio.Lock()
        
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω–∏ –º–æ–≤–∏
        self.app_state.register_on_language_change(self._on_lang_change)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –º–∞–π–Ω–æ–º
        self.property_service = PropertyService(dm)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ DragDropManager (page –±—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ)
        self.drag_drop_manager: Optional[DragDropManager] = None
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –Ω–æ–≤—ñ —Å–∏—Å—Ç–µ–º–∏
        self.validator = DataValidator()
        logger.info("PropertiesView initialized with new systems")


        # Overlay/dialog controls
        self.file_picker: Optional[ft.FilePicker] = None
        self.add_edit_dialog: Optional[ft.AlertDialog] = None
        self.sell_dialog: Optional[ft.AlertDialog] = None
        self.confirm_dialog: Optional[ft.AlertDialog] = None

        # Add/edit form state
        self.editing_property_id: Optional[int] = None
        self.current_image_b64: Optional[str] = None
        self.input_name: Optional[ft.TextField] = None
        self.input_price: Optional[ft.TextField] = None
        self.preview_image: Optional[ft.Image] = None

        # Sell form state
        self.sell_price_input: Optional[ft.TextField] = None
        self.sell_notes_input: Optional[ft.TextField] = None

        # Main view controls
        self.main_property_view: Optional[ft.Column] = None
        self.list_container: Optional[ft.Container] = None
        self.total_label: Optional[ft.Text] = None
        self.total_value: Optional[ft.Text] = None
        self.tabs_row: Optional[ft.Container] = None
        self.btn_tab_active: Optional[ft.OutlinedButton] = None
        self.btn_tab_sold: Optional[ft.OutlinedButton] = None
        self.add_button: Optional[ft.ElevatedButton] = None

        # Subscriptions
        self.app_state.register_on_profile_change(self.handle_profile_change)
        self.app_state.register_on_language_change(self._on_lang_change)

        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –ø–æ–¥—ñ–π –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è overlay
        self._setup_window_event_handlers()

    def _setup_window_event_handlers(self):
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –≤—ñ–∫–Ω–∞"""
        if self.page and hasattr(self.page, 'on_resize'):
            self.page.on_resize = self._handle_window_resize

    def _handle_window_resize(self, e):
        """–û–±—Ä–æ–±–ª—è—î –∑–º—ñ–Ω—É —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞"""
        try:
            self._calculate_adaptive_sizes(e.width, e.height)
            self._simple_overlay_cleanup()
        except Exception as e:
            logger.error(f"Error in window resize handler: {e}")

    def _calculate_adaptive_sizes(self, window_width: int, window_height: int):
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –∞–¥–∞–ø—Ç–∏–≤–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ –∫–∞—Ä—Ç–æ—á–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞"""
        try:
            # –ë–∞–∑–æ–≤—ñ —Ä–æ–∑–º—ñ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤ –µ–∫—Ä–∞–Ω—É
            if window_width < 800:  # –ú–∞–ª–µ–Ω—å–∫–∏–π –µ–∫—Ä–∞–Ω
                scale_factor = 0.8
            elif window_width < 1200:  # –°–µ—Ä–µ–¥–Ω—ñ–π –µ–∫—Ä–∞–Ω
                scale_factor = 1.0
            elif window_width < 1600:  # –í–µ–ª–∏–∫–∏–π –µ–∫—Ä–∞–Ω
                scale_factor = 1.1
            else:  # –î—É–∂–µ –≤–µ–ª–∏–∫–∏–π –µ–∫—Ä–∞–Ω
                scale_factor = 1.2
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–æ–≤—ñ —Ä–æ–∑–º—ñ—Ä–∏
            self.CARD_WIDTH = int(self.BASE_CARD_WIDTH * scale_factor)
            self.CARD_HEIGHT = int(self.BASE_CARD_HEIGHT * scale_factor)
            self.IMG_WIDTH = int(self.BASE_IMG_WIDTH * scale_factor)
            
        except Exception as e:
            logger.error(f"Error calculating adaptive sizes: {e}")
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—ñ —Ä–æ–∑–º—ñ—Ä–∏ —è–∫ fallback
            self.CARD_WIDTH = self.BASE_CARD_WIDTH
            self.CARD_HEIGHT = self.BASE_CARD_HEIGHT
            self.IMG_WIDTH = self.BASE_IMG_WIDTH

    async def on_view_show(self):
        try:
            logger.info("PropertiesView on_view_show called")
            if self is None:
                logger.warning("PropertiesView is None")
                return
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–∞—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∞—Ç—Ä–∏–±—É—Ç–∏
            if not hasattr(self, '_set_attr_internal'):
                logger.error("PropertiesView missing _set_attr_internal attribute")
                return
                
            # –ü—Ä–∏–º—É—Å–æ–≤–æ –±—É–¥—É—î–º–æ UI –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É
            logger.info(f"PropertiesView _is_built: {self._is_built}")
            self._build_ui()
            self.controls.clear()
            self.controls.append(self.main_property_view)
            self._is_built = True
            logger.info("PropertiesView UI built successfully")
            
            # –ü—Ä–∏–º—É—Å–æ–≤–æ –ø–æ–∫–∞–∑—É—î–º–æ PropertiesView
            self.visible = True
            if hasattr(self, 'main_property_view'):
                self.main_property_view.visible = True
                logger.info(f"PropertiesView visible: {self.visible}, main_property_view visible: {self.main_property_view.visible}")

            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∞–¥–∞–ø—Ç–∏–≤–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –ø–æ–∫–∞–∑—ñ
            if self.page and hasattr(self.page, 'width') and hasattr(self.page, 'height'):
                self._calculate_adaptive_sizes(self.page.width, self.page.height)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
            if self.page:
                self.page.update()

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ drag_drop_manager —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if not self.drag_drop_manager and self.page:
                try:
                    self.drag_drop_manager = DragDropManager(self.page)
                except Exception as e:
            
                    self.drag_drop_manager = None

            # –ë–µ–∑–ø–µ—á–Ω–æ –æ—á–∏—â–∞—î–º–æ overlay –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ view (–ø—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏–∫–∞)
            try:
                if hasattr(self, '_simple_overlay_cleanup'):
                    self._simple_overlay_cleanup()
            except Exception:
                # Emergency cleanup
                try:
                    if self.page and hasattr(self.page, 'overlay'):
                        for overlay_item in self.page.overlay[:]:
                            if hasattr(overlay_item, 'visible') and overlay_item.visible:
                                try:
                                    overlay_item.visible = False
                                except Exception:
                                    pass
                except Exception:
                    pass

            # –î–æ–¥–∞—î–º–æ file_picker —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if self.page and hasattr(self, 'file_picker') and self.file_picker is not None and self.file_picker not in self.page.overlay:
                self.page.overlay.append(self.file_picker)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–∞–Ω—ñ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ (–ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)
            if not hasattr(self, '_data_preloaded') or not self._data_preloaded:
                # –í–∏–∫–æ–Ω—É—î–º–æ handle_profile_change —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –¥–∞–Ω—ñ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ
                if self.page and self.app_state.current_profile:
                    print(f"üîç First load: calling handle_profile_change for profile {self.app_state.current_profile.get('id')}")
                    await self.handle_profile_change(self.app_state.current_profile)
                    # –ü—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ UI
                    print(f"üîç First load: forcing UI refresh after data load")
                    await self._refresh_list(show_loading=False, force_refresh=True, skip_ui_update=False)
            else:
                # –î–∞–Ω—ñ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ, –æ–Ω–æ–≤–ª—é—î–º–æ UI –∑ –∫–µ—à–æ–≤–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
                if self.page:
                    await self._refresh_list(show_loading=False, force_refresh=False, skip_ui_update=False)
                self._data_preloaded = False  # –°–∫–∏–¥–∞—î–º–æ —Ñ–ª–∞–≥ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É
                
            # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ opacity –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ view
            if hasattr(self, 'opacity'):
                self.opacity = 1.0
            logger.info("PropertiesView on_view_show completed successfully")
        except Exception as e:
            # Fallback: —Å–ø—Ä–æ–±—É—î–º–æ —Ö–æ—á–∞ –± –ø–æ–∫–∞–∑–∞—Ç–∏ –±–∞–∑–æ–≤–∏–π UI
            try:
                if not self._is_built and self.page:
                    self._build_ui()
                    self.controls.clear()
                    self.controls.append(self.main_property_view)
                    self._is_built = True
                    if self.page and hasattr(self.page, 'update'):
                        self.page.update()
            except Exception:
                pass

    def set_page(self, page: ft.Page):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î page –¥–ª—è PropertiesView"""
        if page is None:
    
            return
            
        self.page = page
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ DragDropManager –∑ page
        try:
            self.drag_drop_manager = DragDropManager(page)
        except Exception as e:
    
            self.drag_drop_manager = None

    def cleanup_resources(self):
        """–û—á–∏—â–∞—î —Ä–µ—Å—É—Ä—Å–∏ PropertiesView"""
        try:
            # –û—á–∏—â–∞—î–º–æ drag & drop —Ä–µ—Å—É—Ä—Å–∏
            if self.drag_drop_manager:
                self.drag_drop_manager.cleanup_all()
            
            # –û—á–∏—â–∞—î–º–æ –∫–µ—à
            if hasattr(self, '_active_props_cache'):
                self._active_props_cache.clear()
            
            # –û—á–∏—â–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç–∫–∏
            if hasattr(self, '_active_cards_row'):
                self._active_cards_row = None
            if hasattr(self, '_sold_cards_row'):
                self._sold_cards_row = None
        except Exception:
            pass

    async def on_view_hide(self):
        """–í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—ñ view"""
        try:
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ –±–∞–∑–æ–≤–∏–π –º–µ—Ç–æ–¥
            await super().on_view_hide()
            
            # –û—á–∏—â–∞—î–º–æ —Ä–µ—Å—É—Ä—Å–∏
            self.cleanup_resources()
                    
            # –û—á–∏—â–∞—î–º–æ overlay –µ–ª–µ–º–µ–Ω—Ç–∏
            if self.page and hasattr(self.page, 'overlay'):
                try:
                    for overlay_item in self.page.overlay[:]:
                        if (isinstance(overlay_item, ft.Container) and 
                            hasattr(overlay_item, 'visible') and 
                            overlay_item.visible):
                            overlay_item.visible = False
                            if hasattr(overlay_item, 'opacity'):
                                overlay_item.opacity = 0.0
                except Exception:
                    pass
        except Exception:
            pass


    def _build_ui(self):
        self.file_picker = ft.FilePicker(on_result=self._on_file_pick)

        self.main_property_view = ft.Column(visible=True, expand=True, spacing=20)

        # Header –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º
        self.total_label = ft.Text(
            self.loc.get("properties_total_value", default="–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:"),
            size=16,
            weight=ft.FontWeight.W_500,
            color=ft.Colors.GREY_600
        )
        self.total_value = ft.Text(
            "0", 
            weight=ft.FontWeight.BOLD,
            size=20,
            color=ft.Colors.GREEN_600
        )
        self.total_row = ft.Row(
            [self.total_label, self.total_value],
            alignment=ft.MainAxisAlignment.END,
            spacing=8,
        )



        # –°—É—á–∞—Å–Ω—ñ —Ç–∞–±–∏ –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–æ—é —à–∏—Ä–∏–Ω–æ—é –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –º–æ–≤
        self.btn_tab_active = ft.Container(
            content=ft.Text(
                self.loc.get("properties_tabs_active", default="–ê–∫—Ç–∏–≤–Ω–µ"),
                size=16,
                weight=ft.FontWeight.W_600,
                color=ft.Colors.WHITE,
                text_align=ft.TextAlign.CENTER,
            ),
            on_click=lambda e: self._switch_tab_async("active"),
            padding=ft.padding.symmetric(horizontal=24, vertical=12),
            bgcolor=ft.Colors.BLUE_600,
            border_radius=ft.border_radius.only(top_left=12, bottom_left=12),
            width=140,  # –ó–±—ñ–ª—å—à–µ–Ω–æ –¥–ª—è —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏
            alignment=ft.alignment.center,
        )
        self.btn_tab_sold = ft.Container(
            content=ft.Text(
                self.loc.get("properties_tabs_sold", default="–ü—Ä–æ–¥–∞–Ω–µ"),
                size=16,
                weight=ft.FontWeight.W_600,
                color=ft.Colors.GREY_400,
                text_align=ft.TextAlign.CENTER,
            ),
            on_click=lambda e: self._switch_tab_async("sold"),
            padding=ft.padding.symmetric(horizontal=24, vertical=12),
            bgcolor=ft.Colors.GREY_800,
            border_radius=ft.border_radius.only(top_right=12, bottom_right=12),
            width=140,  # –ó–±—ñ–ª—å—à–µ–Ω–æ –¥–ª—è —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏
            alignment=ft.alignment.center,
        )
        self.tabs_container = ft.Container(
            content=ft.Row([self.btn_tab_active, self.btn_tab_sold], spacing=0),
            bgcolor=ft.Colors.GREY_900,
            border_radius=12,
            padding=ft.padding.all(4),
            margin=ft.margin.only(top=4),
            shadow=ft.BoxShadow(
                spread_radius=1,
                blur_radius=8,
                color=ft.Colors.with_opacity(0.2, ft.Colors.BLACK),
                offset=ft.Offset(0, 2)
            )
        )

        self.list_container = ft.Container(expand=True)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è (—Ç–∏–º—á–∞—Å–æ–≤–æ –≤–∏–¥–∞–ª–µ–Ω–∞ –∑ UI)
        self.add_button = ft.ElevatedButton(
            text=self.loc.get("properties_add_new", default="–î–æ–¥–∞—Ç–∏ –º–∞–π–Ω–æ"),
            icon=ft.Icons.ADD_CIRCLE,
            on_click=self._open_add_dialog,
            style=ft.ButtonStyle(
                color=ft.Colors.WHITE,
                bgcolor=ft.Colors.BLUE_600,
                padding=ft.padding.symmetric(horizontal=20, vertical=10),
                shape=ft.RoundedRectangleBorder(radius=12),
                elevation=2,
            ),
            visible=True,  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤ UI
        )

        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π header
        self.header_row = ft.Row(
            controls=[
                ft.Container(expand=True),  # –õ—ñ–≤–∏–π –≤—ñ–¥—Å—Ç—É–ø
                self.tabs_container,  # –¢–∞–±–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ
                ft.Container(expand=True),  # –ü—Ä–∞–≤–∏–π –≤—ñ–¥—Å—Ç—É–ø
            ],
            alignment=ft.MainAxisAlignment.CENTER,
            vertical_alignment=ft.CrossAxisAlignment.CENTER,
        )
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º—É –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—ñ–¥ —Ç–∞–±–∞–º–∏
        self.add_button_below = ft.ElevatedButton(
            content=ft.Row([
                ft.Icon(ft.Icons.ADD, color=ft.Colors.WHITE, size=20),
                ft.Text(
                    self.loc.get("properties_add_new", default="–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –º–∞–π–Ω–æ"),
                    color=ft.Colors.WHITE,
                    weight=ft.FontWeight.BOLD,
                    size=14
                )
            ], alignment=ft.MainAxisAlignment.CENTER, spacing=8),
            on_click=self._on_add_button_click,
            bgcolor=ft.Colors.BLUE_600,
            style=ft.ButtonStyle(
                padding=ft.padding.symmetric(horizontal=20, vertical=10),
                shape=ft.RoundedRectangleBorder(radius=12),
                elevation=2,
            ),
            visible=True,  # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É
        )
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–¥ —Ç–∞–±–∞–º–∏
        self.add_button_row = ft.Row([
            ft.Container(expand=True),
            self.add_button_below,
            ft.Container(expand=True)
        ], alignment=ft.MainAxisAlignment.CENTER)
        self.add_button_row.visible = True  # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É



        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫—Ä–∞—Å–∏–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        self.page_title_text = ft.Text(
            self.loc.get("properties_title", default="–ú–∞–π–Ω–æ"),
            size=28,
            weight=ft.FontWeight.BOLD,
            color=ft.Colors.WHITE
        )
        
        self.page_title = ft.Container(
            content=ft.Row([
                ft.Icon(
                    ft.Icons.DIAMOND_OUTLINED,
                    size=32,
                    color=ft.Colors.BLUE_400
                ),
                self.page_title_text
            ], spacing=12, alignment=ft.MainAxisAlignment.START),
            padding=ft.padding.only(bottom=10),
            border=ft.border.only(bottom=ft.BorderSide(1, ft.Colors.BLUE_400))
        )

        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑ —Ñ–æ–Ω—É (—Ñ–æ–Ω –±—É–¥–µ –≥–ª–æ–±–∞–ª—å–Ω–∏–º)
        main_content = ft.Column([
            self.page_title,
            self.header_row,
            self.add_button_row,  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä—è–¥–æ–∫ –∑ –∫–Ω–æ–ø–∫–æ—é
            self.list_container
        ], spacing=20, expand=True)
        

        
        self.main_property_view.controls.clear()
        self.main_property_view.controls.append(main_content)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ header –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏
        self._update_header_for_tab()
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∏–ª—ñ —Ç–∞–±—ñ–≤
        self._apply_tab_styles()
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∫–Ω–æ–ø–∫–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
        self._update_add_button_position()

    def _update_add_button_position(self):
        """–û–Ω–æ–≤–ª—é—î –ø–æ–∑–∏—Ü—ñ—é –∫–Ω–æ–ø–∫–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞–Ω—É"""
        if not hasattr(self, 'add_button') or self.add_button is None:
            logger.warning("üîß No add_button found")
            return
            
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–±–∞
        if self.selected_tab != "active":
            logger.info(f"üîß Button hidden - not on active tab: {self.selected_tab}")
            self.add_button.visible = False
            if hasattr(self, 'add_button_below'):
                self.add_button_below.visible = False
            if hasattr(self, 'add_button_row'):
                self.add_button_row.visible = False
            return
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∞–∫—Ç–∏–≤–Ω–µ –º–∞–π–Ω–æ
        has_active_properties = (hasattr(self, '_active_props_cache') and 
                               self._active_props_cache and 
                               len(self._active_props_cache) > 0)
        
        logger.info(f"üîß Updating button position: has_properties={has_active_properties}, tab={self.selected_tab}")
        logger.info(f"üîß Cache state: has_cache={hasattr(self, '_active_props_cache')}, cache_length={len(self._active_props_cache) if hasattr(self, '_active_props_cache') and self._active_props_cache else 0}")
        
        if has_active_properties:
            # –Ñ –º–∞–π–Ω–æ - –∫–Ω–æ–ø–∫–∞ –±—ñ–ª—è "–ê–∫—Ç–∏–≤–Ω–µ –º–∞–π–Ω–æ" (–≤ –∑–∞–≥–æ–ª–æ–≤–∫—É —Å–µ–∫—Ü—ñ—ó)
            logger.info("üîß Showing button in header (near '–ê–∫—Ç–∏–≤–Ω–µ –º–∞–π–Ω–æ')")
            self._show_button_in_header()
        else:
            # –ù–µ–º–∞—î –º–∞–π–Ω–∞ - –∫–Ω–æ–ø–∫–∞ –ø—ñ–¥ —Ç–∞–±–∞–º–∏
            logger.info("üîß Showing button below tabs")
            self._show_button_below_tabs()

    def _show_button_in_header(self):
        """–ü–æ–∫–∞–∑—É—î –∫–Ω–æ–ø–∫—É –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É —Å–µ–∫—Ü—ñ—ó (–±—ñ–ª—è '–ê–∫—Ç–∏–≤–Ω–µ –º–∞–π–Ω–æ')"""
        logger.info("üîß _show_button_in_header called")
        
        # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —Ä—è–¥–æ–∫ –∑ –∫–Ω–æ–ø–∫–æ—é –ø—ñ–¥ —Ç–∞–±–∞–º–∏
        if hasattr(self, 'add_button_row'):
            self.add_button_row.visible = False
            logger.info("üîß Hidden add_button_row")
            
        # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É –ø—ñ–¥ —Ç–∞–±–∞–º–∏
        if hasattr(self, 'add_button_below'):
            self.add_button_below.visible = False
            logger.info("üîß Hidden add_button_below")
            
        # –ö–Ω–æ–ø–∫–∞ –≤–∂–µ —î –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É —Å–µ–∫—Ü—ñ—ó (–±—ñ–ª—è "–ê–∫—Ç–∏–≤–Ω–µ –º–∞–π–Ω–æ"), –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ —ó—ó
        self.add_button.visible = True
        logger.info(f"üîß Button visible set to: {self.add_button.visible}")

    def _show_button_below_tabs(self):
        """–ü–æ–∫–∞–∑—É—î –∫–Ω–æ–ø–∫—É –ø—ñ–¥ —Ç–∞–±–∞–º–∏"""
        logger.info("üîß _show_button_below_tabs called")
        
        # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É —Å–µ–∫—Ü—ñ—ó
        self.add_button.visible = False
        logger.info("üîß Hidden add_button in header")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É –ø—ñ–¥ —Ç–∞–±–∞–º–∏
        if hasattr(self, 'add_button_below'):
            self.add_button_below.visible = True
            logger.info(f"üîß add_button_below visible set to: {self.add_button_below.visible}")
            
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä—è–¥–æ–∫ –∑ –∫–Ω–æ–ø–∫–æ—é –ø—ñ–¥ —Ç–∞–±–∞–º–∏
        if hasattr(self, 'add_button_row'):
            self.add_button_row.visible = True
            logger.info(f"üîß add_button_row visible set to: {self.add_button_row.visible}")

    def _on_add_button_click(self, e):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞–π–Ω–∞"""
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ threading –¥–ª—è –≤–∏–∫–ª–∏–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É
            import threading
            def run_async():
                import asyncio
                try:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    loop.run_until_complete(self._open_property_overlay("add"))
                    loop.close()
                except Exception as ex:
                    logger.error(f"‚ùå Error in async thread: {ex}")
            
            thread = threading.Thread(target=run_async, daemon=True)
            thread.start()
        except Exception as ex:
            logger.error(f"‚ùå Error opening property overlay: {ex}")
            if self.page:
                self.page.show_snack_bar(
                    ft.SnackBar(
                        content=ft.Text(self.loc.get("properties_error_open_dialog", "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥—ñ–∞–ª–æ–≥—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞–π–Ω–∞")),
                        bgcolor=ft.Colors.RED_600
                    )
                )

    def _apply_tab_styles(self):
        is_active = self.selected_tab == "active"
        if self.btn_tab_active and self.btn_tab_sold:
            # –ê–∫—Ç–∏–≤–Ω–∏–π —Ç–∞–±
            self.btn_tab_active.bgcolor = ft.Colors.BLUE_600 if is_active else ft.Colors.GREY_800
            self.btn_tab_active.content.color = ft.Colors.WHITE if is_active else ft.Colors.GREY_400
            self.btn_tab_active.border_radius = ft.border_radius.only(top_left=8, bottom_left=8) if is_active else ft.border_radius.only(top_left=8, bottom_left=8)
            
            # –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞–±
            self.btn_tab_sold.bgcolor = ft.Colors.BLUE_600 if not is_active else ft.Colors.GREY_800
            self.btn_tab_sold.content.color = ft.Colors.WHITE if not is_active else ft.Colors.GREY_400
            self.btn_tab_sold.border_radius = ft.border_radius.only(top_right=8, bottom_right=8) if not is_active else ft.border_radius.only(top_right=8, bottom_right=8)
        


    async def handle_profile_change(self, profile_data: Optional[dict]):
        has_profile = bool(profile_data)
        if has_profile:
            # –í–∏–∫–æ–Ω—É—î–º–æ switch_tab —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è —à–≤–∏–¥—à–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            # –Ø–∫—â–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ –≤–∏–¥–∏–º–∞, –Ω–µ –æ–Ω–æ–≤–ª—é—î–º–æ UI
            await self.switch_tab("active", from_profile_change=True, force=True, skip_ui_update=not self.visible)
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–ª–∞–≥ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            self._data_preloaded = True
        # UI –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –≤ switch_tab -> _refresh_list, —Ç–æ–º—É –Ω–µ —Ä–æ–±–∏–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

    def _switch_tab_async(self, new_tab: str):
        if self.page:
            self.page.run_task(self.switch_tab, new_tab)

    async def switch_tab(self, new_tab: str, from_profile_change: bool = False, force: bool = False, skip_ui_update: bool = False):
        if new_tab not in {"active", "sold"}:
            return
        if new_tab == self.selected_tab and not force:
            return
        async with self._update_lock:
            self.selected_tab = new_tab
            self._update_header_for_tab()
            self._update_add_button_position()
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∏–ª—ñ —Ç–∞–±—ñ–≤
            self._apply_tab_styles()
            
            # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–æ–∫–∞–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—ñ —Ç–∞–±—ñ–≤
            # show_loading = (new_tab == "active" and force)
            await self._refresh_list(show_loading=False, force_refresh=force, skip_ui_update=skip_ui_update)
            
            # UI –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –≤ _refresh_list, —Ç–æ–º—É –Ω–µ —Ä–æ–±–∏–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

    async def _refresh_list(self, show_loading: bool = True, use_cache: bool = False, force_refresh: bool = False, skip_ui_update: bool = False):
        """–û–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –º–∞–π–Ω–∞.
        show_loading: –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (True –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
        use_cache: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–∏–π –∫–µ—à –±–µ–∑ –ø–æ—Ö–æ–¥—É –≤ –ë–î (–¥–ª—è —Ä–µ–æ—Ä–¥–µ—Ä—É)
        force_refresh: –∑–∞–≤–∂–¥–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –∑ –ë–î (–¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –º–∞–π–Ω–∞)
        skip_ui_update: –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI (–¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)
        """
        # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤
        if hasattr(self, '_refreshing') and self._refreshing:
            return
        
        self._refreshing = True
        
        try:
            profile = self.app_state.current_profile
            if not profile:
                return
        
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–∞–Ω—ñ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –≤–∏–¥–∏–º–∞
            if hasattr(self, '_data_preloaded') and self._data_preloaded and self.visible and not force_refresh:

                # –î–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ, –∞–ª–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ UI
                if self.list_container and hasattr(self, '_active_props_cache'):
                    status = "active" if self.selected_tab == "active" else "sold"
                    props = self._active_props_cache if status == "active" else []
                    
                    # –ë—É–¥—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –∑ –∫–µ—à–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
                    content = (
                        await self._build_active_list(props) if status == "active" 
                        else self._build_sold_list(props)
                    )
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
                    if self.list_container.content != content:
                        self.list_container.content = content
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ UI
                    if self.page and not skip_ui_update:
                        self.page.update()
            
                return
            
            # Ensure UI controls exist
            if not self.list_container or not self.main_property_view:
                self._build_ui()

            status = "active" if self.selected_tab == "active" else "sold"
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–∞–π–Ω–æ —Ç–∞ –ø—ñ–¥—Å—É–º–æ–∫ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ –¥–ª—è —à–≤–∏–¥—à–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            if use_cache and not force_refresh and status == "active" and hasattr(self, "_active_props_cache"):
                print(f"üîç Using cache: {len(self._active_props_cache)} items")
                props = list(self._active_props_cache)
                summary = None
            else:
                print(f"üîç Loading from DB: force_refresh={force_refresh}, use_cache={use_cache}, status={status}")
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
                props_task = SafeAsyncExecutor.execute(
                    self.property_service.get_properties, 
                    profile["id"], 
                    status
                )
                
                summary_task = None
                if not use_cache or force_refresh:
                    summary_task = SafeAsyncExecutor.execute(
                        self.property_service.get_property_summary,
                        profile["id"]
                    )
                
                # –ß–µ–∫–∞—î–º–æ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±–æ—Ö –∑–∞–¥–∞—á
                props = await props_task
                summary = await summary_task if summary_task else None
                
                logger.info(f"üîÑ Properties loaded: count={len(props) if props else 0}, status={status}")
                
                if status == "active":
                    self._active_props_cache = list(props)
                    logger.info(f"üîÑ Active cache updated: length={len(self._active_props_cache)}")
                    try:
                        self._current_active_ids = [int(p.get("id")) for p in props if p.get("id") is not None]
                    except (ValueError, TypeError) as e:
                        logger.warning(f"Failed to convert property IDs to int: {e}")
                        self._current_active_ids = [p.get("id") for p in props if p.get("id") is not None]
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∫–Ω–æ–ø–∫–∏ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É
                    self._update_add_button_position()

            # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å
            if self.total_value:
                if summary:
                    if status == "active":
                        self.total_value.value = format_number(summary["active_total"])
                    else:
                        self.total_value.value = format_number(summary["sold_total"])
                else:
                    self.total_value.value = "0"

            # –ë—É–¥—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
            content = (
                await self._build_active_list(props) if status == "active" 
                else self._build_sold_list(props)
            )
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω –∑–º—ñ–Ω–∏–≤—Å—è
            if self.list_container:
                print(f"üîç Updating list_container content: has_container={bool(self.list_container)}, content_changed={self.list_container.content != content}")
                self.list_container.content = content
                print(f"üîç Content updated successfully")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ header –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
                if status == "active":
                    self._update_header_for_tab()
                
        except Exception as e:
            logger.error(f"Error refreshing property list: {e}")
            if self.list_container:
                self.list_container.content = create_error_message(
                    f"{self.loc.get('properties_errors_loading', default='–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:')} {str(e)}"
                )
        finally:
            self._refreshing = False
            # –û–Ω–æ–≤–ª—é—î–º–æ header –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            if self.selected_tab == "active":
                self._update_header_for_tab()
            # –û–Ω–æ–≤–ª—é—î–º–æ UI —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑ –ø—ñ—Å–ª—è –≤—Å—ñ—Ö –∑–º—ñ–Ω, —è–∫—â–æ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            if self.page and not skip_ui_update:
                self.page.update()

    async def _build_active_list(self, props: List[dict]) -> ft.Control:
        print(f"üîç _build_active_list called with {len(props) if props else 0} properties")
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–µ—à –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–∑ –±–ª–∏–º–∞–Ω–Ω—è
        self._active_props_cache = list(props)

        # –Ø–∫—â–æ –Ω–µ–º–∞—î –º–∞–π–Ω–∞, –ø–æ–∫–∞–∑—É—î–º–æ placeholder
        if not props:
            try:
                self._current_active_ids = []
            except Exception:
                self._current_active_ids = []
            
            return self._placeholder(
                self.loc.get("properties_list_empty", default="–°–ø–∏—Å–æ–∫ –º–∞–π–Ω–∞ –ø–æ—Ä–æ–∂–Ω—ñ–π.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–î–æ–¥–∞—Ç–∏ –º–∞–π–Ω–æ' —â–æ–± –ø–æ—á–∞—Ç–∏.")
            )

        try:
            self._current_active_ids = [int(p.get("id")) for p in props]
        except Exception:
            self._current_active_ids = [p.get("id") for p in props]

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—É—á–∞—Å–Ω–∏–π dashboard –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞–π–Ω–∞
        dashboard = self._build_active_dashboard(props)
        
        return dashboard

    def _build_sold_list(self, props: List[dict]) -> ft.Control:
        print(f"üîç _build_sold_list called with {len(props) if props else 0} properties")
        if not props:
            return self._placeholder(
                self.loc.get("properties_list_empty_sold", default="–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –ø—Ä–æ–¥–∞–Ω–æ–≥–æ –º–∞–π–Ω–∞.")
            )
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—É—á–∞—Å–Ω–∏–π dashboard
        return self._build_sold_dashboard(props)

    def _create_draggable_card(self, card_content: ft.Control, prop_id: int, group_name: str, swap_callback, card_width: int = None, card_height: int = None) -> ft.DragTarget:
        """–°—Ç–≤–æ—Ä—é—î draggable –∫–∞—Ä—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ DragDropManager"""
        if not self.drag_drop_manager:
            return ft.Container(content=card_content)
        
        width = card_width or self.CARD_WIDTH
        height = card_height or self.CARD_HEIGHT
        
        return self.drag_drop_manager.create_draggable_card(
            card_content=card_content,
            item_id=prop_id,
            group_name=group_name,
            swap_callback=swap_callback,
            card_width=width,
            card_height=height
        )

    def _create_form_divider(self) -> ft.Container:
        """–°—Ç–≤–æ—Ä—é—î —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á –¥–ª—è —Ñ–æ—Ä–º"""
        return ft.Container(
            content=ft.Divider(
                height=1,
                color=ft.Colors.WHITE24,
                thickness=1
            ),
            margin=ft.margin.symmetric(vertical=20)
        )
    
    def _create_cards_row(self, cards: List[ft.DragTarget], spacing: int = 12) -> ft.Row:
        """
        –°—Ç–≤–æ—Ä—é—î —Ä—è–¥–æ–∫ –∑ draggable –∫–∞—Ä—Ç–∫–∞–º–∏
        """
        print(f"üîç _create_cards_row called with {len(cards)} cards, drag_drop_manager={bool(self.drag_drop_manager)}")
        if not self.drag_drop_manager:
            logger.error("‚ùå DragDropManager not initialized")
            return ft.Row(cards, spacing=spacing)
        
        result = self.drag_drop_manager.create_draggable_row(cards, spacing)
        print(f"üîç _create_cards_row created row with {len(result.controls) if hasattr(result, 'controls') else 'unknown'} controls")
        return result

    def _active_card_body(self, prop: dict) -> ft.Container:
        """–°—Ç–≤–æ—Ä—é—î —Ç—ñ–ª–æ –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞–π–Ω–∞"""
        image_b64 = prop.get("image_b64")
        name = prop.get("name", "")
        price = prop.get("price", 0)

        # –ö—Ä–∞—Å–∏–≤–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º
        if image_b64 and image_b64.strip() and "," in image_b64:
            img = ft.Container(
                content=ft.Image(
                    src_base64=image_b64.split(",")[1],
                    width=self.CARD_WIDTH - 20, 
                    height=140, 
                    fit=ft.ImageFit.COVER,
                ),
                border_radius=12,
                clip_behavior=ft.ClipBehavior.ANTI_ALIAS,
            )
        elif image_b64 and image_b64.strip():
            img = ft.Container(
                content=ft.Image(
                    src=image_b64, 
                    width=self.CARD_WIDTH - 20, 
                    height=140, 
                    fit=ft.ImageFit.COVER,
                ),
                border_radius=12,
                clip_behavior=ft.ClipBehavior.ANTI_ALIAS,
            )
        else:
            img = ft.Container(
                width=self.CARD_WIDTH - 20, 
                height=140, 
                bgcolor=ft.Colors.GREY_800,
                border_radius=12,
                content=ft.Column([
                    ft.Icon(ft.Icons.HOME_WORK, color=ft.Colors.GREY_400, size=40),
                    ft.Text(self.loc.get("properties_image_no_photo", default="–ù–µ–º–∞—î —Ñ–æ—Ç–æ"), size=12, color=ft.Colors.GREY_500)
                ], alignment=ft.MainAxisAlignment.CENTER, spacing=8),
                alignment=ft.alignment.center,
                border=ft.border.all(1, ft.Colors.GREY_600)
            )

        # –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = ft.Text(
            name, 
            weight=ft.FontWeight.BOLD, 
            size=16, 
            no_wrap=True, 
            overflow=ft.TextOverflow.ELLIPSIS,
            color=ft.Colors.GREY_800
        )
        
        # –ö—Ä–∞—Å–∏–≤–∞ —Ü—ñ–Ω–∞ –∑ —ñ–∫–æ–Ω–∫–æ—é –±–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        price_text = ft.Row([
            ft.Icon(ft.Icons.ATTACH_MONEY, color=ft.Colors.GREEN_600, size=16),
            ft.Text(
                f"{int(price):,}".replace(",", " "), 
                color=ft.Colors.GREEN_600, 
                size=18,
                weight=ft.FontWeight.BOLD
            )
        ], spacing=4)
        
        # –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ (—Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ purchase_date, –ø–æ—Ç—ñ–º fallback –Ω–∞ created_timestamp)
        purchase_dt = prop.get("purchase_date", "")
        if not purchase_dt:
            purchase_dt = prop.get("created_timestamp", "")
            
        if purchase_dt and isinstance(purchase_dt, str):
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ ISO —Ñ–æ—Ä–º–∞—Ç –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π
                from datetime import datetime
                dt_obj = datetime.fromisoformat(purchase_dt.replace('Z', '+00:00'))
                formatted_date = dt_obj.strftime("%d.%m.%Y")
            except:
                formatted_date = purchase_dt[:10] if len(purchase_dt) >= 10 else purchase_dt
        else:
            formatted_date = self.loc.get("properties_misc_unknown", default="–ù–µ–≤—ñ–¥–æ–º–æ")
            
        date_text = ft.Row([
            ft.Icon(ft.Icons.CALENDAR_TODAY, color=ft.Colors.GREY_500, size=14),
            ft.Text(
                f"{self.loc.get('properties_misc_purchase_date', default='–ö—É–ø–ª–µ–Ω–æ:')} {formatted_date}",
                color=ft.Colors.GREY_500,
                size=12
            )
        ], spacing=4)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ñ –∫–Ω–æ–ø–∫–∏ –¥—ñ–π —Å–ø—Ä–∞–≤–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
        actions = ft.Column([
            ft.IconButton(
                icon=ft.Icons.SELL_OUTLINED, 
                tooltip=self.loc.get("properties_actions_sell", default="–ü—Ä–æ–¥–∞—Ç–∏"),
                on_click=lambda e, p=prop: self._open_sell_dialog_async(p), 
                icon_size=16,
                icon_color=ft.Colors.GREEN_600,  # –ó–µ–ª–µ–Ω–∏–π —è–∫ —Ñ–æ—Ä–º–∞ –ø—Ä–æ–¥–∞–∂—É
            ),
            ft.IconButton(
                icon=ft.Icons.EDIT_OUTLINED, 
                tooltip=self.loc.get("properties_actions_edit", default="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏"),
                on_click=lambda e, p=prop: self._open_edit_dialog_async(p), 
                icon_size=16,
                icon_color=ft.Colors.AMBER_600,  # –û—Ä–∞–Ω–∂–µ–≤–∏–π —è–∫ —Ñ–æ—Ä–º–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
            ),
            ft.IconButton(
                icon=ft.Icons.DELETE_FOREVER, 
                tooltip=self.loc.get("properties_actions_delete", default="–í–∏–¥–∞–ª–∏—Ç–∏"),
                on_click=lambda e, p=prop: self._confirm_delete_async(p, False), 
                icon_size=16,
                icon_color=ft.Colors.RED_600,
            )
        ], spacing=2, horizontal_alignment=ft.CrossAxisAlignment.CENTER)

        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–ª—ñ–≤–∞
        left_content = ft.Column([
            img, 
            ft.Container(height=12),  # –í—ñ–¥—Å—Ç—É–ø
            title, 
            ft.Container(height=8),   # –í—ñ–¥—Å—Ç—É–ø
            price_text, 
            ft.Container(height=6),   # –í—ñ–¥—Å—Ç—É–ø
            date_text,  # –î–∞—Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
            ft.Container(height=8),   # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –≤—ñ–¥—Å—Ç—É–ø –ø—ñ—Å–ª—è –¥–∞—Ç–∏
        ], spacing=0, horizontal_alignment=ft.CrossAxisAlignment.START, expand=True)

        # –ù–∏–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ —Å–ø—Ä–∞–≤–∞
        bottom_row = ft.Row([
            ft.Container(expand=True),  # –†–æ–∑—Ç—è–≥—É—î–º–æ –ø—Ä–æ—Å—Ç—ñ—Ä –∑–ª—ñ–≤–∞
            actions  # –ö–Ω–æ–ø–∫–∏ —Å–ø—Ä–∞–≤–∞
        ], spacing=0, vertical_alignment=ft.CrossAxisAlignment.CENTER)

        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content_col = ft.Column([
            left_content,  # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            ft.Container(height=16),  # –ó–±—ñ–ª—å—à–µ–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø
            bottom_row  # –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞
        ], spacing=0, horizontal_alignment=ft.CrossAxisAlignment.START)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ä—Ç–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞–π–Ω–∞ (–±–µ–∑ —Å—ñ—Ä–æ–≥–æ —Ñ—ñ–ª—å—Ç—Ä–∞)
        card_container = ft.Container(
            content=content_col,
            width=self.CARD_WIDTH,
            height=self.CARD_HEIGHT,
            bgcolor=ft.Colors.with_opacity(0.12, ft.Colors.WHITE),
            border_radius=16,
            padding=ft.padding.all(10),
            border=ft.border.all(1, ft.Colors.GREY_700),
            shadow=ft.BoxShadow(
                spread_radius=1,
                blur_radius=8,
                color=ft.Colors.with_opacity(0.25, ft.Colors.BLACK),
                offset=ft.Offset(0, 2)
            ),
        )
        
        return card_container

    def _modern_sold_card(self, prop: dict) -> ft.Container:
        """–°—Ç–≤–æ—Ä—é—î —Å—É—á–∞—Å–Ω—É –∫–∞—Ä—Ç–∫—É –¥–ª—è –ø—Ä–æ–¥–∞–Ω–æ–≥–æ –º–∞–π–Ω–∞ –∑ —Ç–∞–∫–æ—é –∂ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é, —è–∫ –∞–∫—Ç–∏–≤–Ω–µ"""
        
        image_b64 = prop.get("image_b64")
        name = prop.get("name", "")
        purchase_price = float(prop.get("price", 0))
        selling_price = float(prop.get("selling_price", 0))
        sold_dt = prop.get("sold_timestamp", "")
        profit = selling_price - purchase_price
        roi = (profit / purchase_price * 100) if purchase_price > 0 else 0
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–ª—ñ—Ä –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        if profit > 0:
            result_color = ft.Colors.GREEN_600
            result_bg = ft.Colors.GREEN_900
            result_icon = ft.Icons.TRENDING_UP
        else:
            result_color = ft.Colors.RED_600
            result_bg = ft.Colors.RED_900
            result_icon = ft.Icons.TRENDING_DOWN

        # –ö—Ä–∞—Å–∏–≤–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º (—Å—ñ—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–Ω–æ–≥–æ –º–∞–π–Ω–∞)
        if image_b64 and "," in image_b64:
            img = ft.Container(
                content=ft.Image(
                    src_base64=image_b64.split(",")[1],
                    width=self.CARD_WIDTH - 20, 
                    height=140, 
                    fit=ft.ImageFit.COVER,
                    color=ft.Colors.GREY_400,
                    color_blend_mode=ft.BlendMode.SATURATION,
                ),
                border_radius=12,
                clip_behavior=ft.ClipBehavior.ANTI_ALIAS,
            )
        elif image_b64:
            img = ft.Container(
                content=ft.Image(
                    src=image_b64, 
                    width=self.CARD_WIDTH - 20, 
                    height=140, 
                    fit=ft.ImageFit.COVER,
                    color=ft.Colors.GREY_400,
                    color_blend_mode=ft.BlendMode.SATURATION,
                ),
                border_radius=12,
                clip_behavior=ft.ClipBehavior.ANTI_ALIAS,
            )
        else:
            img = ft.Container(
                width=self.CARD_WIDTH - 20, 
                height=140, 
                bgcolor=ft.Colors.GREY_800,
                border_radius=12,
                content=ft.Column([
                    ft.Icon(ft.Icons.HOME_WORK, color=ft.Colors.GREY_400, size=40),
                    ft.Text(self.loc.get("properties_image_no_photo", default="–ù–µ–º–∞—î —Ñ–æ—Ç–æ"), size=12, color=ft.Colors.GREY_500)
                ], alignment=ft.MainAxisAlignment.CENTER, spacing=8),
                alignment=ft.alignment.center,
                border=ft.border.all(1, ft.Colors.GREY_600)
            )

        # –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = ft.Text(
            name, 
            weight=ft.FontWeight.BOLD, 
            size=16, 
            no_wrap=True, 
            overflow=ft.TextOverflow.ELLIPSIS,
            color=ft.Colors.GREY_800
        )
        
        # –ö—Ä–∞—Å–∏–≤–∞ —Ü—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∑ —ñ–∫–æ–Ω–∫–æ—é
        price_text = ft.Row([
            ft.Icon(ft.Icons.ATTACH_MONEY, color=ft.Colors.GREEN_600, size=16),
            ft.Text(
                f"{int(selling_price):,}".replace(",", " "), 
                color=ft.Colors.GREEN_600, 
                size=18,
                weight=ft.FontWeight.BOLD
            )
        ], spacing=4)
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–∏–±—É—Ç–æ–∫ –≤–Ω–∏–∑—É –∫–∞—Ä—Ç–∫–∏ (—à–∏—Ä—à–∞ —ñ –±–ª–∏–∂—á–µ –¥–æ –∫–Ω–æ–ø–æ–∫)
        profit_info = ft.Container(
            content=ft.Row([
                ft.Icon(result_icon, color=ft.Colors.WHITE, size=14),
                ft.Text(
                    f"{format_number(profit)} ({roi:.1f}%)",
                    color=ft.Colors.WHITE,
                    size=12,
                    weight=ft.FontWeight.BOLD
                )
            ], spacing=4, alignment=ft.MainAxisAlignment.CENTER),
            padding=ft.padding.symmetric(horizontal=8, vertical=4),
            bgcolor=result_bg,
            border_radius=6,
            margin=ft.margin.only(top=4, right=8),  # –í—ñ–¥—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
            width=160  # –ó–±—ñ–ª—å—à–µ–Ω–∞ —à–∏—Ä–∏–Ω–∞
        )
        
        # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π (–ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º)
        actions = ft.Column([
            # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –∞–∫—Ç–∏–≤–Ω–µ
            ft.IconButton(
                icon=ft.Icons.UNDO, 
                tooltip=self.loc.get("properties_restore_restore_to_active", default="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤ –∞–∫—Ç–∏–≤–Ω–µ"),
                on_click=lambda e, p=prop: self._handle_restore_click(p), 
                icon_size=16,
                icon_color=ft.Colors.BLUE_600,
            ),
            # –ö–Ω–æ–ø–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            ft.IconButton(
                icon=ft.Icons.DELETE_FOREVER, 
                tooltip=self.loc.get("properties_restore_delete_forever", default="–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–∑–∞–≤–∂–¥–∏"),
                on_click=lambda e, p=prop: self._confirm_delete_async(p, True), 
                icon_size=16,
                icon_color=ft.Colors.RED_600,
            )
        ], spacing=2, horizontal_alignment=ft.CrossAxisAlignment.CENTER)

        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–ª—ñ–≤–∞
        left_content = ft.Column([
            img, 
            ft.Container(height=12),  # –í—ñ–¥—Å—Ç—É–ø
            title, 
            ft.Container(height=8),   # –í—ñ–¥—Å—Ç—É–ø
            price_text, 
            ft.Container(height=6),   # –í—ñ–¥—Å—Ç—É–ø
            profit_info,  # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–∏–±—É—Ç–æ–∫
        ], spacing=0, horizontal_alignment=ft.CrossAxisAlignment.START, expand=True)

        # –ù–∏–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ —Å–ø—Ä–∞–≤–∞
        bottom_row = ft.Row([
            ft.Container(expand=True),  # –†–æ–∑—Ç—è–≥—É—î–º–æ –ø—Ä–æ—Å—Ç—ñ—Ä –∑–ª—ñ–≤–∞
            actions  # –ö–Ω–æ–ø–∫–∏ —Å–ø—Ä–∞–≤–∞
        ], spacing=0, vertical_alignment=ft.CrossAxisAlignment.CENTER)

        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content_col = ft.Column([
            left_content,  # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            ft.Container(height=16),  # –í—ñ–¥—Å—Ç—É–ø
            bottom_row  # –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞
        ], spacing=0, horizontal_alignment=ft.CrossAxisAlignment.START)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ä—Ç–∫—É –∑ —Å—ñ—Ä–∏–º —Ñ—ñ–ª—å—Ç—Ä–æ–º —Ç–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é
        card_container = ft.Container(
            content=content_col,
            width=self.CARD_WIDTH,
            height=self.CARD_HEIGHT,
            bgcolor=ft.Colors.with_opacity(0.12, ft.Colors.WHITE),
            border_radius=16,
            padding=ft.padding.all(10),
            border=ft.border.all(1, ft.Colors.GREY_700),
            shadow=ft.BoxShadow(
                spread_radius=1,
                blur_radius=8,
                color=ft.Colors.with_opacity(0.25, ft.Colors.BLACK),
                offset=ft.Offset(0, 2)
            ),
            # –î–æ–¥–∞—î–º–æ —Å—ñ—Ä–∏–π —Ñ—ñ–ª—å—Ç—Ä –¥–æ –≤—Å—ñ—î—ó –∫–∞—Ä—Ç–∫–∏
            opacity=0.6,
        )
        
        # –û–±–≥–æ—Ä—Ç–∞—î–º–æ –≤ GestureDetector –¥–ª—è –∫–ª—ñ–∫—É
        interactive_card = ft.GestureDetector(
            content=card_container,
            on_tap=lambda e: self._on_sold_card_click(e),
        )
        
        return interactive_card
        
        return card_container



    def _update_header_for_tab(self):
        """–û–Ω–æ–≤–ª—é—î header –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–∏–±—Ä–∞–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏"""
        logger.info(f"üîÑ _update_header_for_tab called, selected_tab={self.selected_tab}")
        
        if not hasattr(self, 'header_row'):
            logger.info("üîÑ Header update skipped - no header_row")
            return
        
        # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤
        if hasattr(self, '_header_updating') and self._header_updating:
            logger.info("üîÑ Header update skipped - already updating")
            return
        
        self._header_updating = True
        
        try:
            # –û—á–∏—â–∞—î–º–æ header
            self.header_row.controls.clear()
            
            # –ó–∞–≤–∂–¥–∏ —Ü–µ–Ω—Ç—Ä—É—î–º–æ —Ç–∞–±–∏, –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–∫–ª–∞–¥–∫–∏
            self.header_row.controls.extend([
                ft.Container(expand=True),  # –õ—ñ–≤–∏–π –≤—ñ–¥—Å—Ç—É–ø
                self.tabs_container,  # –¢–∞–±–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                ft.Container(expand=True),  # –ü—Ä–∞–≤–∏–π –≤—ñ–¥—Å—Ç—É–ø
            ])
            

        finally:
            self._header_updating = False

    def _build_sold_dashboard(self, props: List[dict]) -> ft.Control:
        """–°—Ç–≤–æ—Ä—é—î —Å—É—á–∞—Å–Ω–∏–π dashboard –¥–ª—è –ø—Ä–æ–¥–∞–Ω–æ–≥–æ –º–∞–π–Ω–∞"""
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_profit = 0
        total_invested = 0
        total_sold = 0
        profitable_count = 0
        
        for prop in props:
            purchase_price = float(prop.get("price", 0))
            selling_price = float(prop.get("selling_price", 0))
            profit = selling_price - purchase_price
            
            total_invested += purchase_price
            total_sold += selling_price
            total_profit += profit
            if profit > 0:
                profitable_count += 1
        
        avg_roi = (total_profit / total_invested * 100) if total_invested > 0 else 0
        success_rate = (profitable_count / len(props) * 100) if props else 0
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ—Ç—Ä–∏–∫–∏
        metrics_row = ft.Row([
            # –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫
            ft.Container(
                content=ft.Column([
                    ft.Container(
                        content=ft.Icon(ft.Icons.TRENDING_UP, color=ft.Colors.WHITE, size=24),
                        padding=ft.padding.all(8),
                        bgcolor=ft.Colors.GREEN_600,
                        border_radius=12,
                        margin=ft.margin.only(bottom=8)
                    ),
                    ft.Text(
                        f"{format_number(total_profit)}",
                        size=20,
                        weight=ft.FontWeight.BOLD,
                        color=ft.Colors.WHITE
                    ),
                    ft.Text(
                        self.loc.get("properties_stats_total_profit", default="–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫"),
                        size=12,
                        color=ft.Colors.WHITE70
                    )
                ], horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                padding=ft.padding.all(8),
                bgcolor=ft.Colors.GREEN_700,
                border_radius=16,
                expand=True,
                margin=ft.margin.only(right=10)
            ),
            
            # –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å
            ft.Container(
                content=ft.Column([
                    ft.Container(
                        content=ft.Icon(ft.Icons.PERCENT, color=ft.Colors.WHITE, size=24),
                        padding=ft.padding.all(8),
                        bgcolor=ft.Colors.BLUE_600,
                        border_radius=12,
                        margin=ft.margin.only(bottom=8)
                    ),
                    ft.Text(
                        f"{avg_roi:.1f}%",
                        size=20,
                        weight=ft.FontWeight.BOLD,
                        color=ft.Colors.WHITE
                    ),
                    ft.Text(
                        self.loc.get("properties_stats_avg_profitability", default="–°–µ—Ä–µ–¥–Ω—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å"),
                        size=12,
                        color=ft.Colors.WHITE70
                    )
                ], horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                padding=ft.padding.all(8),
                bgcolor=ft.Colors.BLUE_700,
                border_radius=16,
                expand=True,
                margin=ft.margin.only(right=10)
            ),
            
            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—ñ–≤
            ft.Container(
                content=ft.Column([
                    ft.Container(
                        content=ft.Icon(ft.Icons.HOME_WORK, color=ft.Colors.WHITE, size=24),
                        padding=ft.padding.all(8),
                        bgcolor=ft.Colors.PURPLE_600,
                        border_radius=12,
                        margin=ft.margin.only(bottom=8)
                    ),
                    ft.Text(
                        str(len(props)),
                        size=20,
                        weight=ft.FontWeight.BOLD,
                        color=ft.Colors.WHITE
                    ),
                    ft.Text(
                        self.loc.get("properties_stats_sold_count", default="–ü—Ä–æ–¥–∞–Ω–æ –º–∞–π–Ω–∞"),
                        size=12,
                        color=ft.Colors.WHITE70
                    )
                ], horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                padding=ft.padding.all(8),
                bgcolor=ft.Colors.PURPLE_700,
                border_radius=16,
                expand=True,
                margin=ft.margin.only(right=10)
            ),
            
            # –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å
            ft.Container(
                content=ft.Column([
                    ft.Container(
                        content=ft.Icon(ft.Icons.STAR, color=ft.Colors.WHITE, size=24),
                        padding=ft.padding.all(8),
                        bgcolor=ft.Colors.AMBER_600,
                        border_radius=12,
                        margin=ft.margin.only(bottom=8)
                    ),
                    ft.Text(
                        f"{success_rate:.1f}%",
                        size=20,
                        weight=ft.FontWeight.BOLD,
                        color=ft.Colors.WHITE
                    ),
                    ft.Text(
                        self.loc.get("properties_stats_successful_deals", default="–£—Å–ø—ñ—à–Ω–∏—Ö —É–≥–æ–¥"),
                        size=12,
                        color=ft.Colors.WHITE70
                    )
                ], horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                padding=ft.padding.all(8),
                bgcolor=ft.Colors.AMBER_700,
                border_radius=16,
                expand=True,
            )
        ], spacing=0)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ draggable –∫–∞—Ä—Ç–∫–∏ –ø—Ä–æ–¥–∞–∂—ñ–≤ (–∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É –º–∞–π–Ω—É)
        sold_cards = []
        for i, prop in enumerate(props):
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ä—Ç–∫—É –∑ drag & drop —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—é
            sold_card = self._create_draggable_card(self._modern_sold_card(prop), prop.get("id"), "props_swap", self._on_swap_accept_async)
            sold_cards.append(sold_card)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ Row –∑ –∫–∞—Ä—Ç–∫–∞–º–∏ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        sold_cards_row = self._create_cards_row(sold_cards)
        self._sold_cards_row = sold_cards_row
        
        # –û–±'—î–¥–Ω—É—î–º–æ –≤—Å–µ –≤ dashboard
        return ft.Column([
            # –ú–µ—Ç—Ä–∏–∫–∏
            ft.Container(
                content=metrics_row,
                margin=ft.margin.only(bottom=20)
            ),
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó
            ft.Container(
                content=ft.Row([
                    ft.Icon(ft.Icons.HISTORY, color=ft.Colors.WHITE70, size=24),
                    ft.Text(
                        self.loc.get("properties_stats_sales_history", default="–Ü—Å—Ç–æ—Ä—ñ—è –ø—Ä–æ–¥–∞–∂—ñ–≤"),
                        size=20,
                        weight=ft.FontWeight.BOLD,
                        color=ft.Colors.WHITE
                    )
                ], spacing=12),
                margin=ft.margin.only(bottom=16)
            ),
            
            # –ö–∞—Ä—Ç–∫–∏ –ø—Ä–æ–¥–∞–∂—ñ–≤ –∑ drag & drop (–±–µ–∑ –≤—ñ–¥—Å—Ç—É–ø—ñ–≤ –∑–ª—ñ–≤–∞)
            ft.Container(
                content=sold_cards_row,
                expand=True,
                margin=ft.margin.only(left=0)  # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ª—ñ–≤–∏–π –≤—ñ–¥—Å—Ç—É–ø
            )
        ], expand=True)

    def _build_active_dashboard(self, props: List[dict]) -> ft.Control:
        """–°—Ç–≤–æ—Ä—é—î —Å—É—á–∞—Å–Ω–∏–π dashboard –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞–π–Ω–∞"""
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_value = 0
        total_count = len(props)
        avg_value = 0
        
        for prop in props:
            total_value += float(prop.get("price", 0))
        
        avg_value = total_value / total_count if total_count > 0 else 0
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ—Ç—Ä–∏–∫–∏
        metrics_row = ft.Row([
            # –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å
            ft.Container(
                content=ft.Column([
                    ft.Container(
                        content=ft.Icon(ft.Icons.ACCOUNT_BALANCE_WALLET, color=ft.Colors.WHITE, size=24),
                        padding=ft.padding.all(8),
                        bgcolor=ft.Colors.BLUE_600,
                        border_radius=12,
                        margin=ft.margin.only(bottom=8)
                    ),
                ft.Text(
                        f"{format_number(total_value)}",
                        size=20,
                        weight=ft.FontWeight.BOLD,
                        color=ft.Colors.WHITE
                    ),
                    ft.Text(
                        self.loc.get("properties_stats_total_value_active", default="–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å"),
                        size=12,
                        color=ft.Colors.WHITE70
                    )
                ], horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                padding=ft.padding.all(8),
                bgcolor=ft.Colors.BLUE_700,
                border_radius=16,
                expand=True,
                margin=ft.margin.only(right=10)
            ),
            
            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞–π–Ω–∞
            ft.Container(
                content=ft.Column([
                    ft.Container(
                        content=ft.Icon(ft.Icons.HOME_WORK, color=ft.Colors.WHITE, size=24),
                        padding=ft.padding.all(8),
                        bgcolor=ft.Colors.GREEN_600,
                        border_radius=12,
                        margin=ft.margin.only(bottom=8)
                    ),
                ft.Text(
                        str(total_count),
                        size=20,
                        weight=ft.FontWeight.BOLD,
                        color=ft.Colors.WHITE
                    ),
                    ft.Text(
                        self.loc.get("properties_stats_active_count", default="–ê–∫—Ç–∏–≤–Ω–µ –º–∞–π–Ω–æ"),
                        size=12,
                        color=ft.Colors.WHITE70
                    )
                ], horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                padding=ft.padding.all(8),
                bgcolor=ft.Colors.GREEN_700,
                border_radius=16,
                expand=True,
                margin=ft.margin.only(right=10)
            ),
            
            # –°–µ—Ä–µ–¥–Ω—è –≤–∞—Ä—Ç—ñ—Å—Ç—å
            ft.Container(
                content=ft.Column([
                    ft.Container(
                        content=ft.Icon(ft.Icons.CALCULATE, color=ft.Colors.WHITE, size=24),
                        padding=ft.padding.all(8),
                        bgcolor=ft.Colors.PURPLE_600,
                        border_radius=12,
                        margin=ft.margin.only(bottom=8)
                    ),
                ft.Text(
                        f"{format_number(avg_value)}",
                        size=20,
                        weight=ft.FontWeight.BOLD,
                        color=ft.Colors.WHITE
                    ),
                    ft.Text(
                        self.loc.get("properties_stats_avg_value", default="–°–µ—Ä–µ–¥–Ω—è –≤–∞—Ä—Ç—ñ—Å—Ç—å"),
                    size=12,
                        color=ft.Colors.WHITE70
                    )
                ], horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                padding=ft.padding.all(8),
                bgcolor=ft.Colors.PURPLE_700,
                border_radius=16,
                expand=True,
                margin=ft.margin.only(right=10)
            ),
            
            # –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫
            ft.Container(
                content=ft.Column([
                    ft.Container(
                        content=ft.Icon(ft.Icons.TRENDING_UP, color=ft.Colors.WHITE, size=24),
                        padding=ft.padding.all(8),
                        bgcolor=ft.Colors.AMBER_600,
                        border_radius=12,
                        margin=ft.margin.only(bottom=8)
                    ),
                    ft.Text(
                        "‚àû",
                        size=20,
                        weight=ft.FontWeight.BOLD,
                        color=ft.Colors.WHITE
                    ),
                    ft.Text(
                        self.loc.get("properties_stats_potential_profit", default="–ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫"),
                        size=12,
                        color=ft.Colors.WHITE70
                    )
                ], horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                padding=ft.padding.all(8),
                bgcolor=ft.Colors.AMBER_700,
                border_radius=16,
                expand=True,
            )
        ], spacing=0)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ä—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞–π–Ω–∞ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π —Ä—è–¥)
        active_cards = []
        print(f"üîç Creating {len(props)} active cards")
        for idx, prop in enumerate(props):
            print(f"üîç Creating card {idx+1}: {prop.get('name', 'Unknown')} (ID: {prop.get('id')})")
            active_cards.append(self._create_draggable_card(self._active_card_body(prop), prop.get("id"), "props_swap", self._on_swap_accept_async))
        print(f"üîç Created {len(active_cards)} active cards")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ Row –∑ –∫–∞—Ä—Ç–∫–∞–º–∏ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        cards_row = self._create_cards_row(active_cards)
        self._active_cards_row = cards_row
        
        # –û–±'—î–¥–Ω—É—î–º–æ –≤—Å–µ –≤ dashboard
        return ft.Column([
            # –ú–µ—Ç—Ä–∏–∫–∏
                ft.Container(
                content=metrics_row,
                margin=ft.margin.only(bottom=20)
                ),
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó –∑ –∫–Ω–æ–ø–∫–æ—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è
                ft.Container(
                content=ft.Row([
                    ft.Icon(ft.Icons.HOME_WORK, color=ft.Colors.WHITE70, size=24),
                    ft.Text(
                        self.loc.get("properties_stats_active_count", default="–ê–∫—Ç–∏–≤–Ω–µ –º–∞–π–Ω–æ"),
                        size=20,
                        weight=ft.FontWeight.BOLD,
                        color=ft.Colors.WHITE
                    ),
                    ft.Container(
                        content=self.add_button,
                        margin=ft.margin.only(left=12)
                    )
                ], spacing=12),
                margin=ft.margin.only(bottom=16)
            ),
            
            # –ö–∞—Ä—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞–π–Ω–∞ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π —Ä—è–¥)
            ft.Container(
                    content=cards_row,
                expand=True
            )
        ], expand=True)

    def _placeholder(self, text: str) -> ft.Container:
        """–°—Ç–≤–æ—Ä—é—î placeholder –∑ —Ç–µ–∫—Å—Ç–æ–º"""
        # –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—è–¥–∫–∏, —è–∫—â–æ —î –ø–µ—Ä–µ–Ω–æ—Å–∏
        text_lines = text.split('\n')
        
        controls = [
            ft.Container(
                content=ft.Icon(ft.Icons.HOME_WORK_OUTLINED, size=60, color=ft.Colors.GREY_400),
                padding=ft.padding.all(20),
                bgcolor=ft.Colors.GREY_800,
                border_radius=30,
                margin=ft.margin.only(bottom=20)
            ),
        ]
        
        # –î–æ–¥–∞—î–º–æ –∫–æ–∂–µ–Ω —Ä—è–¥–æ–∫ —Ç–µ–∫—Å—Ç—É
        for i, line in enumerate(text_lines):
            if line.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏
                controls.append(
                    ft.Text(
                        line.strip(),
                        size=18 if i == 0 else 14,  # –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ –±—ñ–ª—å—à–∏–π
                        weight=ft.FontWeight.W_500 if i == 0 else ft.FontWeight.NORMAL,
                        color=ft.Colors.GREY_300 if i == 0 else ft.Colors.GREY_400,
                        text_align=ft.TextAlign.CENTER,
                    )
                )
        
        return ft.Container(
            content=ft.Column(controls, horizontal_alignment=ft.CrossAxisAlignment.CENTER, spacing=15),
            alignment=ft.alignment.center,
            height=300,
            border_radius=16,
            bgcolor=ft.Colors.GREY_900,
            border=ft.border.all(1, ft.Colors.GREY_700),
            padding=ft.padding.all(40),
        )

    def _on_swap_accept(self, e: ft.DragTargetEvent, target_prop_id: int):
        """–û–±—Ä–æ–±–ª—è—î drop –ø–æ–¥—ñ—é —á–µ—Ä–µ–∑ DragDropManager"""
        if self.page:
            self.page.run_task(self._on_swap_accept_async, target_prop_id)

    def _on_drag_start(self, dragged_id: int | str | None):
        """–û–±—Ä–æ–±–ª—è—î –ø–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ DragDropManager"""
        if self.drag_drop_manager and dragged_id is not None:
            try:
                item_id = int(dragged_id) if isinstance(dragged_id, str) else dragged_id
                self.drag_drop_manager._on_drag_start(item_id)
            except (ValueError, TypeError) as e:
                logger.warning(f"Failed to convert dragged_id to int: {e}")

    async def _on_swap_accept_async(self, target_prop_id: int):
        """–ú—ñ–Ω—è—î –º—ñ—Å—Ü—è–º–∏ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω—É –∫–∞—Ä—Ç–∫—É –∑ —Ü—ñ–ª—å–æ–≤–æ—é —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ä—è–¥–æ–∫."""
        logger.info(f"üîÑ Swap accept called for target_prop_id: {target_prop_id}")
        
        if not self.drag_drop_manager:
            logger.error("‚ùå DragDropManager not initialized")
            return
        
        profile = self.app_state.current_profile
        if not profile:
            logger.error("‚ùå No profile")
            return
        
        selected_tab = getattr(self, "selected_tab", "active")
        if selected_tab not in ["active", "sold"]:
            logger.error(f"‚ùå Invalid tab: {selected_tab}")
            return
        
        logger.info(f"üìç Processing swap for tab: {selected_tab}, profile: {profile.get('id')}")

        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –º–∞–π–Ω–∞
            current_ids = []
            logger.info(f"üîÑ Getting current order for tab: {selected_tab}")
            
            if selected_tab == "active":
                # –î–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞–π–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ –ë–î
                if hasattr(self, "_current_active_ids") and self._current_active_ids:
                    current_ids = [int(pid) for pid in self._current_active_ids]
                else:
                    props_fresh = await SafeAsyncExecutor.execute(
                        self.property_service.get_properties,
                        profile["id"],
                        "active",
                    )
                    current_ids = [int(p.get("id")) for p in props_fresh]
                    self._active_props_cache = list(props_fresh)
                    self._current_active_ids = list(current_ids)
            else:
                # –î–ª—è –ø—Ä–æ–¥–∞–Ω–æ–≥–æ –º–∞–π–Ω–∞ –∑–∞–≤–∂–¥–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ –ë–î
                logger.info("üîÑ Getting sold properties from DB")
                sold_props = await self.property_service.get_properties(profile["id"], "sold")
                current_ids = [int(prop.get("id")) for prop in sold_props]
                logger.info(f"‚úÖ Got {len(current_ids)} sold properties: {current_ids}")
            
            if not current_ids:
                logger.error("‚ùå No current_ids found")
                return

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ callback –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä—è–¥–∫—É –≤ –ë–î
            async def update_order_callback(new_order: List[int]):
                if selected_tab == "active":
                    await SafeAsyncExecutor.execute(
                        self.property_service.update_properties_order,
                        profile["id"], 
                        new_order,
                    )
                    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
                    self._current_active_ids = list(new_order)
                else:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω—ñ –æ–±'—î–∫—Ç–∏ –ø—Ä–æ–¥–∞–Ω–æ–≥–æ –º–∞–π–Ω–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä—è–¥–∫—É
                    sold_props = await self.property_service.get_properties(profile["id"], "sold")
                    ordered_sold_props = []
                    for prop_id in new_order:
                        for prop in sold_props:
                            if prop.get("id") == prop_id:
                                ordered_sold_props.append(prop)
                                break
                    logger.info(f"üîÑ Saving sold properties order to DB: {[prop.get('id') for prop in ordered_sold_props]}")
                    await self.property_service.update_sold_properties_order(profile["id"], ordered_sold_props)
                    logger.info("‚úÖ Sold properties order saved to DB")

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ callback –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI (–¥–ª—è –æ–±–æ—Ö —Ç–∏–ø—ñ–≤ –º–∞–π–Ω–∞)
            async def refresh_ui_callback(new_order: List[int]):
                if selected_tab == "active":
                    try:
                        logger.info("üîÑ Updating active dashboard without flickering")
                        # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à –∑ –Ω–æ–≤–∏–º –ø–æ—Ä—è–¥–∫–æ–º
                        cache_list = list(getattr(self, "_active_props_cache", []))
                        new_cache = []
                        for prop_id in new_order:
                            for prop in cache_list:
                                if prop.get("id") == prop_id:
                                    new_cache.append(prop)
                                    break
                        
                        self._active_props_cache = new_cache
                        
                        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Row –∑ –∫–∞—Ä—Ç–∫–∞–º–∏
                        if hasattr(self, '_active_cards_row') and self._active_cards_row:
                            cards_row = self._active_cards_row
                            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ –∫–∞—Ä—Ç–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
                            new_cards = []
                            for prop in new_cache:
                                new_cards.append(self._create_draggable_card(
                                    self._active_card_body(prop), 
                                    prop.get("id"), 
                                    "props_swap", 
                                    self._on_swap_accept_async
                                ))
                            
                            # –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ controls –≤ Row, –Ω–µ —Å—Ç–≤–æ—Ä—é—é—á–∏ –Ω–æ–≤–∏–π –æ–±'—î–∫—Ç
                            cards_row.controls.clear()
                            cards_row.controls.extend(new_cards)
                            
                            if self.page:
                                self.page.update()
                                logger.info("‚úÖ Active cards reordered without flickering")
                            return
                        
                        # –§–æ–ª–±–µ–∫: —è–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ Row, –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤–Ω—ñ—Å—Ç—é
                        logger.info("üîÑ Fallback: updating entire dashboard")
                        new_active_dashboard = self._build_active_dashboard(new_cache)
                        if self.list_container:
                            self.list_container.content = new_active_dashboard
                            if self.page:
                                self.page.update()
                                logger.info("‚úÖ Active dashboard updated with fallback")
                    except Exception as ex:
                        logger.error(f"‚ùå Error updating active cache: {ex}")
                        await self._refresh_list(show_loading=False, use_cache=False)
                elif selected_tab == "sold":
                    try:
                        logger.info("üîÑ Updating sold dashboard without flickering")
                        # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–¥–∞–Ω–µ –º–∞–π–Ω–æ –∑ –Ω–æ–≤–∏–º –ø–æ—Ä—è–¥–∫–æ–º
                        sold_props = await self.property_service.get_properties(profile["id"], "sold")
                        new_sold_props = []
                        for prop_id in new_order:
                            for prop in sold_props:
                                if prop.get("id") == prop_id:
                                    new_sold_props.append(prop)
                                    break
                        
                        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Row –∑ –∫–∞—Ä—Ç–∫–∞–º–∏
                        if hasattr(self, '_sold_cards_row') and self._sold_cards_row:
                            cards_row = self._sold_cards_row
                            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ –∫–∞—Ä—Ç–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
                            new_cards = []
                            for prop in new_sold_props:
                                new_cards.append(self._create_draggable_card(
                                    self._modern_sold_card(prop), 
                                    prop.get("id"), 
                                    "props_swap", 
                                    self._on_swap_accept_async
                                ))
                            
                            # –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ controls –≤ Row, –Ω–µ —Å—Ç–≤–æ—Ä—é—é—á–∏ –Ω–æ–≤–∏–π –æ–±'—î–∫—Ç
                            cards_row.controls.clear()
                            cards_row.controls.extend(new_cards)
                            
                            if self.page:
                                self.page.update()
                                logger.info("‚úÖ Sold cards reordered without flickering")
                            return
                        
                        # –§–æ–ª–±–µ–∫: —è–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ Row, –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤–Ω—ñ—Å—Ç—é
                        logger.info("üîÑ Fallback: updating entire sold dashboard")
                        await self._refresh_list(show_loading=False, use_cache=False)
                        logger.info("‚úÖ Sold dashboard updated with fallback")
                    except Exception as ex:
                        logger.error(f"‚ùå Failed to update sold dashboard: {ex}")
                        await self._refresh_list(show_loading=False, use_cache=False)

            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ DragDropManager –¥–ª—è –æ–±—Ä–æ–±–∫–∏ swap
            success = await self.drag_drop_manager.handle_swap_async(
                target_id=target_prop_id,
                current_ids=current_ids,
                update_order_callback=update_order_callback,
                refresh_ui_callback=refresh_ui_callback
            )
            
            if not success:
                logger.error("‚ùå Swap operation failed")
                await self._refresh_list(show_loading=False, use_cache=False)
                    
        except Exception as ex:
            logger.error(f"‚ùå Error in swap operation: {ex}")
            await self._refresh_list(show_loading=False, use_cache=False)



    def _open_add_dialog(self, e):
        if self.page:
            self.page.run_task(self._open_add_dialog_async)

    async def _open_add_dialog_async(self):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –æ–≤–µ—Ä–ª–µ–π —Ñ–æ—Ä–º–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞–π–Ω–∞"""
        await self._open_property_overlay(mode="add")
    
    def _close_simple_dialog(self):
        """–ó–∞–∫—Ä–∏–≤–∞—î –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ AlertDialog –≤ overlay"""
        try:
            if self.page:
                for overlay_item in self.page.overlay[:]:
                    if isinstance(overlay_item, ft.AlertDialog) and overlay_item.open:
                        overlay_item.open = False
                        self.page.overlay.remove(overlay_item)
                self.page.update()
        except Exception as e:
            logger.error(f"‚ùå Error in _close_simple_dialog: {e}")

    def _simple_overlay_cleanup(self):
        """–ü—Ä–æ—Å—Ç–∏–π —Å–ø–æ—Å—ñ–± –æ—á–∏—â–µ–Ω–Ω—è overlay"""
        try:
            if not self.page or not hasattr(self.page, 'overlay'):
                return

            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
            for item in self.page.overlay[:]:
                if (item is not None and 
                    hasattr(item, 'open') and 
                    hasattr(item, '_set_attr_internal') and
                    callable(getattr(item, 'open', None))):
                    try:
                        item.open = False
                    except Exception:
                        pass

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ file_picker, —è–∫—â–æ –≤—ñ–Ω —î
            preserved_items = []
            if hasattr(self, 'file_picker') and self.file_picker is not None and self.file_picker in self.page.overlay:
                preserved_items.append(self.file_picker)

            # –ü–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—â–∞—î–º–æ overlay
            self.page.overlay.clear()

            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
            for item in preserved_items:
                if item is not None:
                    self.page.overlay.append(item)

            # –û—á–∏—â–∞—î–º–æ –∞—Ç—Ä–∏–±—É—Ç–∏
            if hasattr(self, '_add_property_overlay'):
                delattr(self, '_add_property_overlay')

            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
            if self.page:
                self.page.update()

        except Exception:
            # –ê–≤–∞—Ä—ñ–π–Ω–∞ —Å–ø—Ä–æ–±–∞
            try:
                if self.page and hasattr(self.page, 'overlay') and hasattr(self.page, 'update'):
                    # –ë–µ–∑–ø–µ—á–Ω–æ –æ—á–∏—â–∞—î–º–æ overlay
                    overlay_copy = self.page.overlay[:]
                    self.page.overlay.clear()
                    
                    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ file_picker —è–∫—â–æ –≤—ñ–Ω —î
                    if hasattr(self, 'file_picker') and self.file_picker is not None:
                        self.page.overlay.append(self.file_picker)
                    
                    self.page.update()
            except Exception:
                # –§—ñ–Ω–∞–ª—å–Ω–∞ —Å–ø—Ä–æ–±–∞ - –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
                try:
                    if self.page and hasattr(self.page, 'update'):
                        self.page.update()
                except Exception:
                    pass

    def _close_form_container(self):
        try:
            if self.page:
                self._simple_overlay_cleanup()

                # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ—á–∏—â–µ–Ω–Ω—è –¥–ª—è —Ñ–æ—Ä–º–∏
                if hasattr(self, 'preview_container') and self.preview_container is not None:
                    try:
                        if hasattr(self.preview_container, 'visible') and hasattr(self.preview_container, '_set_attr_internal'):
                            self.preview_container.visible = False
                    except Exception:
                        pass

                # –û—á–∏—â–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ —Ñ–æ—Ä–º–∏
                self.current_image_b64 = None


        except Exception:
            pass
    

    def _submit_edit_property(self, prop_id: int, name: str, price: str):
        """–û–±—Ä–æ–±–ª—è—î —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –º–∞–π–Ω–∞"""
        try:
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
            if not name or not name.strip():
                return
            
            if not price or not price.strip():
                return
            
            try:
                price_value = float(price)
                if price_value <= 0:
                    return
            except ValueError:
                return
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏
            purchase_date = self.input_purchase_date.get_date_string() if self.input_purchase_date else None
            
            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Ñ–æ—Ä–º—É
            self._close_form_container()
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
            if self.page:
                self.page.run_task(self._save_edit_property_async, prop_id, name, price_value, purchase_date)
        except Exception:
            pass

    def _submit_sell_property(self, prop_id: int, price: str):
        """–û–±—Ä–æ–±–ª—è—î –ø—Ä–æ–¥–∞–∂ –º–∞–π–Ω–∞"""
        try:
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
            if not price or not price.strip():
                return
            
            try:
                selling_price = float(price)
                if selling_price <= 0:
                    return
            except ValueError:
                return
            
            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Ñ–æ—Ä–º—É
            self._close_form_container()
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –ø—Ä–æ–¥–∞–∂
            if self.page:
                self.page.run_task(self._save_sell_property_async, prop_id, selling_price)
        except Exception:
            pass

    
    async def _show_success_message(self, message: str):
        """–ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö"""
        if self.page:
            self.page.snack_bar = ft.SnackBar(
                content=ft.Text(message),
                bgcolor=ft.Colors.GREEN_700
            )
            self.page.snack_bar.open = True
            self.page.update()
    
    async def _show_error_message(self, message: str):
        """–ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É"""
        if self.page:
            self.page.snack_bar = ft.SnackBar(
                content=ft.Text(message),
                bgcolor=ft.Colors.RED_700
            )
            self.page.snack_bar.open = True
            self.page.update()
    
    def _pick_photo(self):
        """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Ñ–æ—Ç–æ"""
        if self.page and self.file_picker:
            self.file_picker.pick_files(
                allowed_extensions=["jpg", "jpeg", "png", "gif"],
                allow_multiple=False
            )

    def _clear_photo(self):
        """–û—á–∏—â–∞—î –≤–∏–±—Ä–∞–Ω–µ/–≤—Å—Ç–∞–≤–ª–µ–Ω–µ —Ñ–æ—Ç–æ —Ç–∞ —Ö–æ–≤–∞—î –ø—Ä–µ–≤'—é"""
        self.current_image_b64 = None
        if hasattr(self, 'preview_container') and self.preview_container is not None:
            try:
                if hasattr(self.preview_container, 'visible') and hasattr(self.preview_container, '_set_attr_internal'):
                    self.preview_container.visible = False
            except Exception:
                pass
        if self.page:
            self.page.update()

    def _paste_from_clipboard(self):
        """–í—Å—Ç–∞–≤–ª—è—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É (Windows/macOS/Linux)"""
        try:
            import io
            from PIL import Image, ImageGrab

            image_bytes: bytes | None = None

            # 1) –ü—Ä–æ–±—É—î–º–æ –¥—ñ—Å—Ç–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –∑ –±—É—Ñ–µ—Ä–∞
            grabbed = ImageGrab.grabclipboard()
            if isinstance(grabbed, Image.Image):
                buffer = io.BytesIO()
                grabbed.save(buffer, format='PNG')
                image_bytes = buffer.getvalue()
            elif isinstance(grabbed, list) and grabbed:
                # –î–µ—è–∫—ñ —Å–∏—Å—Ç–µ–º–∏ –∫–ª–∞–¥—É—Ç—å —É –±—É—Ñ–µ—Ä —à–ª—è—Ö(–∏) –¥–æ —Ñ–∞–π–ª—É(—ñ–≤)
                first_path = grabbed[0]
                try:
                    with open(first_path, 'rb') as f:
                        image_bytes = f.read()
                except Exception:
                    image_bytes = None

            if not image_bytes:
                # –ù–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É –±—É—Ñ–µ—Ä—ñ
                if self.page:
                    self.page.snack_bar = ft.SnackBar(
                        content=ft.Text(self.loc.get("properties_image_clipboard_no_image", default="–í –±—É—Ñ–µ—Ä—ñ –æ–±–º—ñ–Ω—É –Ω–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")),
                        bgcolor=ft.Colors.RED_700
                    )
                    self.page.snack_bar.open = True
                    self.page.update()
                return

            # 2) –ö–æ–º–ø—Ä–µ—Å—É—î–º–æ —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —É Base64 —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å
            self.current_image_b64 = PropertyService.image_to_base64(image_bytes)
            if not self.current_image_b64:
                if self.page:
                    self.page.snack_bar = ft.SnackBar(
                        content=ft.Text(self.loc.get("properties_image_image_processing_error", default="–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –±—É—Ñ–µ—Ä–∞")),
                        bgcolor=ft.Colors.RED_700
                    )
                    self.page.snack_bar.open = True
                    self.page.update()
                return

            # 3) –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–µ–≤'—é
            pass
            self._update_preview()
            if self.page:
                self.page.snack_bar = ft.SnackBar(
                    content=ft.Text(self.loc.get("properties_image_image_pasted", default="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É!")),
                    bgcolor=ft.Colors.GREEN_700
                )
                self.page.snack_bar.open = True
                self.page.update()
        except Exception as e:
            if self.page:
                self.page.snack_bar = ft.SnackBar(
                    content=ft.Text(f"{self.loc.get('properties_error_paste', '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤—Ü—ñ')}: {str(e)}"),
                    bgcolor=ft.Colors.RED_700
                )
                self.page.snack_bar.open = True
                self.page.update()

    async def _paste_from_clipboard_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—Å—Ç–∞–≤–ª—è—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É"""
        try:
            if not self.page:
                return
            image_data = self.page.clipboard.get_image()
            if not image_data:
                self.page.snack_bar = ft.SnackBar(content=ft.Text(self.loc.get("properties_image_clipboard_no_image", "–í –±—É—Ñ–µ—Ä—ñ –æ–±–º—ñ–Ω—É –Ω–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")), bgcolor=ft.Colors.RED_700)
                self.page.snack_bar.open = True
                self.page.update()
                return
            b64 = base64.b64encode(image_data).decode("utf-8")
            self.current_image_b64 = f"data:image/png;base64,{b64}"
            pass
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–µ–≤ º—é —á–µ—Ä–µ–∑ —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –±–ª–æ–∫
            self._update_preview()
            self.page.snack_bar = ft.SnackBar(content=ft.Text(self.loc.get("properties_image_image_pasted", "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É!")), bgcolor=ft.Colors.GREEN_700)
            self.page.snack_bar.open = True
            self.page.update()
        except Exception:
            pass

    def _open_edit_dialog_async(self, prop: dict):
        if self.page:
            self.page.run_task(self._open_property_overlay, "edit", prop)

    async def _open_property_overlay(self, mode: str, prop: Optional[dict] = None):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –æ–≤–µ—Ä–ª–µ–π —Ñ–æ—Ä–º–∏ –¥–ª—è add/edit/sell."""
        if not self.page:
            return

        # –û—á–∏—â–∞—î–º–æ overlay –ø–µ—Ä–µ–¥ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è–º –Ω–æ–≤–æ–≥–æ
        self._simple_overlay_cleanup()
        
        # –û—á–∏—â–∞—î–º–æ —Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–∂–∏–º—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è
        if mode == "add":
            if hasattr(self, 'preview_container') and self.preview_container is not None:
                try:
                    if hasattr(self.preview_container, 'visible') and hasattr(self.preview_container, '_set_attr_internal'):
                        self.preview_container.visible = False
                except Exception:
                    pass
        
        title_text = self.loc.get("properties_add_dialog_title", default="–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –º–∞–π–Ω–æ") if mode == "add" else (self.loc.get("properties_edit_dialog_title", default="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –º–∞–π–Ω–æ") if mode == "edit" else self.loc.get("properties_sell_dialog_title", default="–ü—Ä–æ–¥–∞—Ç–∏ –º–∞–π–Ω–æ"))

        # –ü–æ–ª—è –≤–≤–æ–¥—É
        name_field = ft.TextField(label=self.loc.get("properties_name_label", default="–ù–∞–∑–≤–∞ –º–∞–π–Ω–∞"), width=520, **TEXT_FIELD_STYLE)
        price_field = ft.TextField(label=self.loc.get("properties_price_label", default="–¶—ñ–Ω–∞"), width=520, input_filter=ft.NumbersOnlyInputFilter(), **TEXT_FIELD_STYLE)
        
        # –õ–µ–π–±–ª —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞—Ç–∏ –ø–æ–∫—É–ø–∫–∏
        purchase_date_label = ft.Text(
            self.loc.get("properties_purchase_date_label", default="–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏"),
            size=16,
            weight=ft.FontWeight.BOLD,
            color=ft.Colors.WHITE
        )
        
        # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏
        self.purchase_date_display = ft.Text(
            "",  # –ë—É–¥–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ
            size=14,
            color=ft.Colors.WHITE70,
            weight=ft.FontWeight.NORMAL
        )
        
        # –ö–Ω–æ–ø–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        calendar_button = ft.IconButton(
            icon=ft.Icons.CALENDAR_MONTH,
            tooltip="–í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä",
            icon_color=ft.Colors.WHITE,
            icon_size=20,
            style=ft.ButtonStyle(
                bgcolor=ft.Colors.AMBER_600 if mode == "edit" else ft.Colors.BLUE_600,
                shape=ft.RoundedRectangleBorder(radius=4)
            )
        )
        
        # Date picker (—Ç—ñ–ª—å–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä)
        purchase_date_picker = ModernDatePicker(
            page=self.page,
            mode=mode,  # –ü–µ—Ä–µ–¥–∞—î–º–æ —Ä–µ–∂–∏–º (add/edit)
            localization_manager=self.loc  # –ü–µ—Ä–µ–¥–∞—î–º–æ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—é
        )
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ callback –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞—Ç–∏
        def on_date_changed(selected_date):
            self.purchase_date_display.value = selected_date.strftime("%d.%m.%Y")
            if self.page:
                self.page.update()
        
        purchase_date_picker.on_date_changed = on_date_changed
        
        # –ü—Ä–∏–≤'—è–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–æ date picker
        calendar_button.on_click = purchase_date_picker._toggle_calendar
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞–π–Ω–∞
        if mode == "add":
            from datetime import date
            today = date.today()
            purchase_date_picker.set_date(today)
            self.purchase_date_display.value = today.strftime("%d.%m.%Y")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–ª—è –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ _submit_add_edit_async
        self.input_name = name_field
        self.input_price = price_field
        self.input_purchase_date = purchase_date_picker
        
        # –î–ª—è —Ä–µ–∂–∏–º—É –ø—Ä–æ–¥–∞–∂—É —Ä–æ–±–∏–º–æ –Ω–∞–∑–≤—É —Ç—ñ–ª—å–∫–∏ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è
        if mode == "sell":
            name_field.read_only = True
            name_field.disabled = True
            # –î–ª—è date picker –≤ —Ä–µ–∂–∏–º—ñ –ø—Ä–æ–¥–∞–∂—É –ø—Ä–æ—Å—Ç–æ –Ω–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ –∑–º—ñ–Ω–∏
            purchase_date_picker.disabled = True

        # –Ø–∫—â–æ —Ä–µ–¥–∞–≥—É—î–º–æ –∞–±–æ –ø—Ä–æ–¥–∞—î–º–æ ‚Äî –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è
        if prop:
            name_field.value = prop.get("name", "")
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç—É –≤ picker —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            purchase_date_str = prop.get("purchase_date", "")
            if purchase_date_str:
                purchase_date_picker.set_date_from_string(purchase_date_str)
                # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞—Ç–∏
                try:
                    from datetime import datetime
                    dt_obj = datetime.strptime(purchase_date_str, "%Y-%m-%d")
                    self.purchase_date_display.value = dt_obj.strftime("%d.%m.%Y")
                except:
                    self.purchase_date_display.value = purchase_date_str[:10] if len(purchase_date_str) >= 10 else purchase_date_str
            else:
                # –Ø–∫—â–æ –¥–∞—Ç–∞ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É
                from datetime import date
                self.purchase_date_display.value = date.today().strftime("%d.%m.%Y")
            if mode == "sell":
                # –í —Ä–µ–∂–∏–º—ñ –ø—Ä–æ–¥–∞–∂—É –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –º–∞–π–Ω–∞ —è–∫ –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
                try:
                    price_field.value = str(int(float(prop.get("price", 0))))
                except Exception:
                    price_field.value = str(prop.get("price", 0))
            else:
                # –í —Ä–µ–∂–∏–º—ñ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É
                try:
                    price_field.value = str(int(float(prop.get("price", 0))))
                except Exception:
                    price_field.value = str(prop.get("price", 0))
            
                            # –î–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –ø—Ä–æ–ø–∞
                if mode == "edit" and prop.get("image_b64"):
                    self.current_image_b64 = prop.get("image_b64")

        # –ö–Ω–æ–ø–∫–∏ —Ñ–æ—Ç–æ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è add/edit, –Ω–µ –¥–ª—è sell)
        if mode != "sell":
            photo_buttons = ft.Row([
                ft.Container(content=ft.ElevatedButton(self.loc.get("properties_add_photo", default="–î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ"), on_click=lambda e: self._pick_photo(), icon=ft.Icons.PHOTO_CAMERA,
                                                      style=ft.ButtonStyle(padding=ft.padding.all(14), shape=ft.RoundedRectangleBorder(radius=10), color=ft.Colors.WHITE, bgcolor=ft.Colors.GREY_700))),
                ft.Container(content=ft.ElevatedButton(self.loc.get("properties_paste_from_clipboard", default="–í—Å—Ç–∞–≤–∏—Ç–∏ –∑ –±—É—Ñ–µ—Ä–∞"), on_click=lambda e: self._paste_from_clipboard(), icon=ft.Icons.CONTENT_PASTE,
                                                      style=ft.ButtonStyle(padding=ft.padding.all(14), shape=ft.RoundedRectangleBorder(radius=10), color=ft.Colors.WHITE, bgcolor=ft.Colors.BLUE_700)))
            ], spacing=10)
        else:
            photo_buttons = ft.Container(height=0)  # –ü–æ—Ä–æ–∂–Ω—ñ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è sell

        # –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è add/edit, –Ω–µ –¥–ª—è sell)
        if mode != "sell":
            self.preview_container = ft.Container(
                content=ft.Column([
                    ft.Text(self.loc.get("properties_preview", default="–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥:"), size=16, color=ft.Colors.WHITE70, weight=ft.FontWeight.W_500),
                    ft.Container(content=ft.Text(self.loc.get("properties_no_image", default="–ù–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"), size=14, color=ft.Colors.GREY_500), width=280, height=200,
                                 bgcolor=ft.Colors.GREY_800, border_radius=12, alignment=ft.alignment.center, border=ft.border.all(1, ft.Colors.GREY_600))
                ], spacing=12),
                visible=False,
            )
            # –Ø–∫—â–æ —î –∫–∞—Ä—Ç–∏–Ω–∫–∞ —É —Å—Ç–∞–Ω—ñ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–µ–≤ º—é (–ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è preview_container)
            if getattr(self, 'current_image_b64', None):
                self._update_preview()
        else:
            self.preview_container = ft.Container(height=0)  # –ü–æ—Ä–æ–∂–Ω—ñ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è sell

        # –¢—ñ–ª–æ —Ñ–æ—Ä–º–∏
        if mode == "sell":
            # –î–ª—è –ø—Ä–æ–¥–∞–∂—É –¥–æ–¥–∞—î–º–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä–∂—ñ
            margin_label = ft.Text(self.loc.get("properties_margin_calculation", default="–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä–∂—ñ:"), size=16, color=ft.Colors.WHITE70, weight=ft.FontWeight.W_500)
            margin_result = ft.Text("", size=14, color=ft.Colors.GREY_500)
            
            def update_margin(e):
                try:
                    original_price = float(prop.get("price", 0)) if prop and prop.get("price") else 0
                    selling_price = float(price_field.value or 0)
                    if selling_price > 0 and original_price > 0:
                        margin = selling_price - original_price
                        margin_percent = (margin / original_price) * 100
                        if margin > 0:
                            margin_result.value = f"+{int(margin):,} $\n(+{margin_percent:.1f}%)".replace(",", " ")
                            margin_result.color = ft.Colors.GREEN_400
                        else:
                            margin_result.value = f"{int(margin):,} $\n({margin_percent:.1f}%)".replace(",", " ")
                            margin_result.color = ft.Colors.RED_400
                    else:
                        margin_result.value = self.loc.get("properties_enter_sell_price", default="–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –ø—Ä–æ–¥–∞–∂—É")
                        margin_result.color = ft.Colors.GREY_500
                    margin_result.update()
                except:
                    margin_result.value = self.loc.get("properties_calculation_error", default="–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É")
                    margin_result.color = ft.Colors.GREY_500
                    margin_result.update()
            
            # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Ü—ñ–Ω–∏ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞—Ä–∂—ñ
            def on_price_change(e):
                # –û—á–∏—â–∞—î–º–æ –ø–æ–ª–µ –≤—ñ–¥ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
                original_value = e.control.value
                cleaned_value = ''.join(filter(str.isdigit, original_value))
                
                if original_value != cleaned_value:
                    e.control.value = cleaned_value
                    e.control.update()
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä–∂—ñ
                update_margin(e)
            
            price_field.on_change = on_price_change
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä–∂—ñ
            if prop and prop.get("price"):
                try:
                    original_price = float(prop.get("price", 0))
                    if original_price > 0:
                        margin_result.value = f"{self.loc.get('properties_current_price', default='–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞:')}\n{int(original_price):,} $".replace(",", " ")
                        margin_result.color = ft.Colors.GREY_500
                except:
                    margin_result.value = self.loc.get("properties_enter_sell_price", default="–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –ø—Ä–æ–¥–∞–∂—É")
                    margin_result.color = ft.Colors.GREY_500
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º–∞—Ä–∂—ñ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–ø—Ä–æ—Ç–∏
            margin_and_buttons_row = ft.Row([
                ft.Column([
                    margin_label,
                    margin_result
                ], spacing=5, expand=True),
                ft.Column([
                    ft.Container(height=0),  # –í—ñ–¥—Å—Ç—É–ø –¥–ª—è –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –∑ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–º –º–∞—Ä–∂—ñ
                    ft.Row([
                        ft.ElevatedButton(self.loc.get("properties_cancel", default="–°–∫–∞—Å—É–≤–∞—Ç–∏"), on_click=lambda e: self._close_form_container(), style=BUTTON_STYLE_DANGER, width=None, height=None),
                        ft.Container(width=15),
                        ft.ElevatedButton(self.loc.get("properties_sell", default="–ü—Ä–æ–¥–∞—Ç–∏"), on_click=lambda e: on_submit(), style=BUTTON_STYLE_PRIMARY, width=None, height=None)
                    ], spacing=0)
                ], alignment=ft.MainAxisAlignment.END)
            ], alignment=ft.MainAxisAlignment.START, spacing=20)
            
            self.form_body = ft.Column([
                ft.Container(height=5),  # –ó–º–µ–Ω—à–µ–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø –∑–≤–µ—Ä—Ö—É
                name_field, 
                ft.Container(height=16), 
                price_field,  # –¢–µ–ø–µ—Ä –ø–æ–ª–µ —Ü—ñ–Ω–∏ –º–∞—î –≤–±—É–¥–æ–≤–∞–Ω–∏–π –ª–µ–π–±–ª
                ft.Container(height=16),
                margin_and_buttons_row  # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä–∂—ñ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
            ], spacing=0)
        else:
            # –î–ª—è —Ä–µ–∂–∏–º—ñ–≤ add/edit —Å—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É
            if mode == "edit":
                # –î–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è - –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–æ –ø—Ä–æ–¥–∞–∂—É, –∞–ª–µ –∑ —Ñ–æ—Ç–æ —Ç–∞ –ø—Ä–µ–≤'—é
                self.form_body = ft.Column([
                    ft.Container(height=2),  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø –∑–≤–µ—Ä—Ö—É
                    
                    # –ì—Ä—É–ø–∞ 1: –ù–∞–∑–≤–∞ —Ç–∞ —Ü—ñ–Ω–∞
                    name_field, 
                    ft.Container(height=12), 
                    price_field,  # –¢–µ–ø–µ—Ä –ø–æ–ª–µ —Ü—ñ–Ω–∏ –º–∞—î –≤–±—É–¥–æ–≤–∞–Ω–∏–π –ª–µ–π–±–ª
                    
                    # –†–æ–∑–¥—ñ–ª—é–≤–∞—á 1
                    self._create_form_divider(),
                    
                    # –ì—Ä—É–ø–∞ 2: –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏
                    ft.Row([
                        purchase_date_label,
                        calendar_button
                    ], spacing=5, alignment=ft.MainAxisAlignment.START),
                    ft.Container(height=6),
                    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞—Ç–∏
                    self.purchase_date_display,
                    ft.Container(height=12),
                    # Date picker (—Ç—ñ–ª—å–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä)
                    purchase_date_picker,
                    
                    # –†–æ–∑–¥—ñ–ª—é–≤–∞—á 2
                    self._create_form_divider(),
                    
                    # –ì—Ä—É–ø–∞ 3: –§–æ—Ç–æ —Ç–∞ –ø—Ä–µ–≤'—é
                    photo_buttons,  # –ö–Ω–æ–ø–∫–∏ —Ñ–æ—Ç–æ
                    ft.Container(height=8),
                    self.preview_container,  # –ü—Ä–µ–≤'—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    ft.Container(height=8)
                    # –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –ø—ñ–∑–Ω—ñ—à–µ
                ], spacing=0)
            else:
                # –î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è - –æ–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                self.form_body = ft.Column([
                    # –ì—Ä—É–ø–∞ 1: –ù–∞–∑–≤–∞ —Ç–∞ —Ü—ñ–Ω–∞
                    name_field, 
                    ft.Container(height=16), 
                    price_field, 
                    
                    # –†–æ–∑–¥—ñ–ª—é–≤–∞—á 1
                    self._create_form_divider(),
                    
                    # –ì—Ä—É–ø–∞ 2: –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏
                    ft.Row([
                        purchase_date_label,
                        calendar_button
                    ], spacing=5, alignment=ft.MainAxisAlignment.START),
                    ft.Container(height=6),
                    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞—Ç–∏
                    self.purchase_date_display,
                    ft.Container(height=12),
                    # Date picker (—Ç—ñ–ª—å–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä)
                    purchase_date_picker, 
                    
                    # –†–æ–∑–¥—ñ–ª—é–≤–∞—á 2
                    self._create_form_divider(),
                    
                    # –ì—Ä—É–ø–∞ 3: –§–æ—Ç–æ —Ç–∞ –ø—Ä–µ–≤'—é
                    photo_buttons, 
                    ft.Container(height=12), 
                    self.preview_container
                ], spacing=0, scroll=ft.ScrollMode.AUTO)
        # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π (—Å—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ—Å–ª—è —Ñ–æ—Ä–º–∏)
        cancel_button = ft.ElevatedButton(self.loc.get("properties_cancel", default="–°–∫–∞—Å—É–≤–∞—Ç–∏"), on_click=lambda e: self._close_form_container(), style=BUTTON_STYLE_DANGER, width=None, height=None)

        def on_submit():
            if mode == "add":
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ _submit_add_edit_async
                self._submit_add_edit()
            elif mode == "edit":
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –ø–∞–π–ø–ª–∞–π–Ω –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å
                try:
                    if not name_field.value or not name_field.value.strip():
                        return
                    if not price_field.value or not price_field.value.strip():
                        return
                    price_value = float(price_field.value)
                    if price_value <= 0:
                        return
                except Exception:
                    return
                if self.page and prop:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏
                    purchase_date = self.input_purchase_date.get_date_string() if self.input_purchase_date else None
                    self.page.run_task(self._save_edit_property_async, prop.get("id"), name_field.value, price_value, purchase_date)
            elif mode == "sell":
                # –î–ª—è –ø—Ä–æ–¥–∞–∂—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ —Ü—ñ–Ω—É —è–∫ selling_price
                try:
                    if not price_field.value or not price_field.value.strip():
                        return
                    selling_price = float(price_field.value)
                    if selling_price <= 0:
                        return
                except Exception:
                    return
                if self.page and prop:
                    self.page.run_task(self._save_sell_property_async, prop.get("id"), selling_price)

        action_text = self.loc.get("properties_add", default="–î–æ–¥–∞—Ç–∏") if mode == "add" else (self.loc.get("properties_save", default="–ó–±–µ—Ä–µ–≥—Ç–∏") if mode == "edit" else self.loc.get("properties_sell", default="–ü—Ä–æ–¥–∞—Ç–∏"))
        submit_button = ft.ElevatedButton(action_text, on_click=lambda e: on_submit(), style=BUTTON_STYLE_PRIMARY, width=None, height=None)
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–æ —Ñ–æ—Ä–º–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        if mode == "edit":
            edit_buttons_row = ft.Row([
                ft.Container(expand=True),  # –†–æ–∑—Ç—è–≥—É—î–º–æ –ø—Ä–æ—Å—Ç—ñ—Ä –∑–ª—ñ–≤–∞
                ft.Row([
                    cancel_button,
                    ft.Container(width=15),
                    submit_button
                ], spacing=0)
            ], alignment=ft.MainAxisAlignment.END)
            self.form_body.controls.append(edit_buttons_row)
            # –î–ª—è edit —Ä–µ–∂–∏–º—É –∫–Ω–æ–ø–∫–∏ –≤–∂–µ –≤ —Ñ–æ—Ä–º—ñ, —Ç–æ–º—É –≤–Ω–∏–∑—É –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ
            actions_row = ft.Container(height=0)
        elif mode == "sell":
            # –î–ª—è sell —Ä–µ–∂–∏–º—É –∫–Ω–æ–ø–∫–∏ –≤–∂–µ –≤ —Ñ–æ—Ä–º—ñ (–≤ margin_and_buttons_row), —Ç–æ–º—É –≤–Ω–∏–∑—É –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ
            actions_row = ft.Container(height=0)
        else:
            # –¢—ñ–ª—å–∫–∏ –¥–ª—è add —Ä–µ–∂–∏–º—É –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É
            actions_row = ft.Row([cancel_button, ft.Container(width=15), submit_button], alignment=ft.MainAxisAlignment.END)

        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞ –≤–∏—Å–æ—Ç–∞ –¥—ñ–∞–ª–æ–≥—É - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥–ª–∞—à—Ç–æ–≤—É—î—Ç—å—Å—è –ø—ñ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É –≤–∏—Å–æ—Ç—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∂–∏–º—É —Ç–∞ —Ä–æ–∑–º—ñ—Ä—É –µ–∫—Ä–∞–Ω—É
        if mode == "sell":
            base_height = 380  # –ó–º–µ–Ω—à–µ–Ω–∞ –≤–∏—Å–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ –ø—É—Å—Ç–µ –º—ñ—Å—Ü–µ
        elif mode == "edit":
            base_height = 450  # –ó–º–µ–Ω—à–µ–Ω–∞ –≤–∏—Å–æ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        else:  # add mode
            base_height = 400  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —Ñ–æ—Ä–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
        
        # –ê–¥–∞–ø—Ç—É—î–º–æ –¥–æ —Ä–æ–∑–º—ñ—Ä—É –µ–∫—Ä–∞–Ω—É
        if self.page and isinstance(self.page.height, (int, float)):
            try:
                screen_height = int(self.page.height)
                max_screen_height = int(screen_height * 0.8)  # 80% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω—É
                dialog_height = min(base_height, max_screen_height)
            except Exception:
                dialog_height = base_height
        else:
            dialog_height = base_height

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–ª—ñ—Ä —ñ–∫–æ–Ω–∫–∏ —Ç–∞ —Ä–∞–º–∫–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∂–∏–º—É
        if mode == "sell":
            icon_bgcolor = ft.Colors.GREEN_600
            border_color = ft.Colors.GREEN_400
        elif mode == "edit":
            icon_bgcolor = ft.Colors.AMBER_600
            border_color = ft.Colors.AMBER_400
        else:  # add mode
            icon_bgcolor = ft.Colors.BLUE_500
            border_color = ft.Colors.BLUE_400

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Å–∫—Ä–æ–ª–ª –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∂–∏–º—É
        scroll_mode = None if mode == "sell" else ft.ScrollMode.AUTO

        form_container = ft.Container(
                content=ft.Column([
                    ft.Container(content=ft.Row([
                        ft.Container(content=ft.Icon(ft.Icons.HOME_WORK, color=ft.Colors.WHITE, size=32), padding=ft.padding.all(12), bgcolor=icon_bgcolor, border_radius=12, margin=ft.margin.only(right=15)),
                        ft.Text(title_text, size=24, weight=ft.FontWeight.BOLD, color=ft.Colors.WHITE)
                    ], alignment=ft.MainAxisAlignment.CENTER), padding=ft.padding.only(bottom=20), margin=ft.margin.only(bottom=10), border=ft.border.only(bottom=ft.border.BorderSide(1, border_color))),
                    ft.Container(content=self.form_body, padding=ft.padding.symmetric(horizontal=15, vertical=8)),
                    ft.Container(content=actions_row, padding=ft.padding.symmetric(horizontal=15, vertical=10))
                ], scroll=scroll_mode),
                padding=ft.padding.all(18), bgcolor=ft.Colors.GREY_900, border_radius=20, border=ft.border.all(2, border_color),
                width=600, height=dialog_height, alignment=ft.alignment.center,
                shadow=ft.BoxShadow(spread_radius=1, blur_radius=20, color=ft.Colors.with_opacity(0.45, ft.Colors.BLACK), offset=ft.Offset(0, 8))
            )

        self.form_container = form_container
        centered_container = ft.Container(content=form_container, alignment=ft.alignment.center, expand=True)
        backdrop = ft.Container(expand=True, bgcolor=ft.Colors.with_opacity(0.6, ft.Colors.BLACK), on_click=lambda e: self._close_form_container())
        overlay_stack = ft.Stack([backdrop, centered_container], expand=True)
        self._add_property_overlay = overlay_stack
        self.page.overlay.append(overlay_stack)
        self.page.update()

    def _ensure_add_edit_dialog(self):
        # —Å—Ç–∞—Ä–∏–π –¥—ñ–∞–ª–æ–≥ –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è ‚Äî —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –æ–≤–µ—Ä–ª–µ–π —Ñ–æ—Ä–º–∏
        return

    def _reset_add_edit_form(self):
        if hasattr(self, 'input_name'):
            self.input_name.value = ""
        if hasattr(self, 'input_price'):
            self.input_price.value = ""
        if hasattr(self, 'input_purchase_date'):
            # –°–∫–∏–¥–∞—î–º–æ date picker –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏
            from datetime import date
            self.input_purchase_date.set_date(date.today())
        if hasattr(self, 'purchase_date_display'):
            # –°–∫–∏–¥–∞—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞—Ç–∏ –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏
            from datetime import date
            self.purchase_date_display.value = date.today().strftime("%d.%m.%Y")
        if hasattr(self, 'preview_image') and self.preview_image is not None:
            try:
                if hasattr(self.preview_image, 'visible') and hasattr(self.preview_image, '_set_attr_internal'):
                    self.preview_image.visible = False
            except Exception:
                pass

    def _submit_add_edit(self):
        if self.page:
            self.page.run_task(self._submit_add_edit_async)

    async def _submit_add_edit_async(self):
        """–í–∞–ª—ñ–¥—É—î —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –º–∞–π–Ω–æ"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –ø–æ–ª—ñ–≤
            name = self.input_name.value.strip() if self.input_name else ""
            price_str = self.input_price.value.strip() if self.input_price else ""
            purchase_date = self.input_purchase_date.get_date_string() if self.input_purchase_date else ""
            
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–∞–∑–≤–∏
            if not name:
                await self._toast(self.loc.get("properties_error_name_empty", default="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É"), error=True)
                return
            
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ü—ñ–Ω–∏
            if not price_str:
                await self._toast(self.loc.get("properties_error_price_empty", default="–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É"), error=True)
                return
            
            try:
                price = float(price_str.replace(',', '.'))
                if price <= 0:
                    await self._toast(
                        self.loc.get("properties_error_price_negative", default="–¶—ñ–Ω–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é"),
                        error=True
                    )
                    return
            except (ValueError, TypeError):
                await self._toast(self.loc.get("properties_error_price_invalid", default="–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ü—ñ–Ω–∏"), error=True)
                return
            
            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
            if len(name) > 100:
                await self._toast(self.loc.get("properties_name_too_long", default="–ù–∞–∑–≤–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª—ñ–≤)"), error=True)
                return
            
            if price > 999999999:
                await self._toast(self.loc.get("properties_price_too_large", default="–¶—ñ–Ω–∞ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∞"), error=True)
                return

            # Date picker –∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î –≤–∞–ª—ñ–¥–Ω—É –¥–∞—Ç—É, —Ç–æ–º—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞

            profile = self.app_state.current_profile
            if not profile:
                await self._toast(self.loc.get("properties_profile_not_found", default="–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"), error=True)
                return

            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç PropertyData –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
            property_data = PropertyData(
                name=name,
                price=price,
                image_b64=getattr(self, 'current_image_b64', None) or "",
                purchase_date=purchase_date if purchase_date else None
            )
            
            # –í–∞–ª—ñ–¥—É—î–º–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å
            errors = property_data.validate()
            if errors:
                await self._toast("; ".join(errors), error=True)
                return

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–∞–π–Ω–æ
            if not self.editing_property_id:
                # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–µ –º–∞–π–Ω–æ
                new_id = await SafeAsyncExecutor.execute(
                    self.property_service.add_property,
                    profile["id"],
                    property_data
                )
                
                if new_id:
                    # –û—á–∏—â–∞—î–º–æ –∫–µ—à
                    
                    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —ñ–Ω—à—ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω–∏
                    try:
                        self.app_state.notify_transactions_change()
                    except Exception:
                        pass
                    
                    await self._toast(self.loc.get("properties_success_add", default="–î–æ–¥–∞–Ω–æ"))
                else:
                    await self._toast(self.loc.get("properties_error_adding", default="–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –º–∞–π–Ω–∞"), error=True)
                    return
            else:
                # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–µ –º–∞–π–Ω–æ
                success = await SafeAsyncExecutor.execute(
                    self.property_service.update_property,
                    self.editing_property_id,
                    property_data
                )
                
                if success:
                    # –û—á–∏—â–∞—î–º–æ –∫–µ—à
                    await self._toast(self.loc.get("properties_success_save", default="–ó–±–µ—Ä–µ–∂–µ–Ω–æ"))
                else:
                    await self._toast(self.loc.get("properties_error_saving", default="–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –º–∞–π–Ω–∞"), error=True)
                    return

            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ overlay —Ñ–æ—Ä–º—É —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫
            self._close_form_container()
            
            # –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º —Å–ø–∏—Å–∫—É
            await asyncio.sleep(0.1)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∑ –ø—Ä–æ–ø—É—Å–∫–æ–º UI –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            await self._refresh_list(skip_ui_update=True)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∫–Ω–æ–ø–∫–∏ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞–π–Ω–∞
            self._update_add_button_position()
            
            # –û–Ω–æ–≤–ª—é—î–º–æ UI –æ–∫—Ä–µ–º–æ
            if self.page:
                self.page.update()
            
        except Exception as e:
            logger.error(f"Error in _submit_add_edit_async: {e}")
            await self._toast(f"{self.loc.get('properties_error', default='–ü–æ–º–∏–ª–∫–∞:')} {str(e)}", error=True)

    def _on_file_pick(self, e: ft.FilePickerResultEvent):
        """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Ñ–∞–π–ª—É –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if not e.files:
            return
        
        try:
            file_path = e.files[0].path
            if not file_path:
                raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É (–º–∞–∫—Å–∏–º—É–º 10MB)
            if os.path.getsize(file_path) > 10 * 1024 * 1024:  # 10MB
                raise ValueError("–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π (–º–∞–∫—Å–∏–º—É–º 10MB)")
            
            # –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª
            with open(file_path, "rb") as f:
                data = f.read()
            
            if not data:
                raise ValueError(self.loc.get("properties_file_empty", default="–§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π"))
            
            # –û–ø—Ç–∏–º—ñ–∑—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å
            self.current_image_b64 = PropertyService.image_to_base64(data)
            
            # –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            if not self.current_image_b64:
                raise ValueError(self.loc.get("properties_image_processing_failed", default="–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"))
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥
            self._update_preview()
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            if self.page:
                self.page.snack_bar = ft.SnackBar(
                    content=ft.Text(self.loc.get("properties_photo_added_success", default="–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")),
                    bgcolor=ft.Colors.GREEN_700
                )
                self.page.snack_bar.open = True
                self.page.update()
                
        except Exception as e:
            logger.error(f"Error processing image file: {e}")
            # –°–∫–∏–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            self.current_image_b64 = None
            self._update_preview()
            
            if self.page:
                error_message = str(e)
                if "–∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π" in error_message:
                    error_message = self.loc.get("properties_file_too_large", default="–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π (–º–∞–∫—Å–∏–º—É–º 10MB)")
                elif "–Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏" in error_message:
                    error_message = self.loc.get("properties_unsupported_format", default="–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
                
                self.page.snack_bar = ft.SnackBar(
                    content=ft.Text(f"{self.loc.get('properties_photo_upload_error', default='–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ:')} {error_message}"),
                    bgcolor=ft.Colors.RED_700
                )
                self.page.snack_bar.open = True
                self.page.update()

    def _open_sell_dialog_async(self, prop: dict):
        if self.page:
            self.page.run_task(self._open_property_overlay, "sell", prop)

    async def _save_edit_property_async(self, prop_id: int, name: str, price_value: float, purchase_date: str = None):
        try:
            property_data = PropertyData(
                name=name, 
                price=price_value, 
                image_b64=getattr(self, 'current_image_b64', None) or "",
                purchase_date=purchase_date
            )
            await SafeAsyncExecutor.execute(self.property_service.update_property, prop_id, property_data)
            self._close_form_container()
            await self._refresh_list(force_refresh=True)  # –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ –∑ –ë–î
            await self._show_success_message(self.loc.get("properties_success_save", default="–ó–±–µ—Ä–µ–∂–µ–Ω–æ"))
        except Exception as e:
            await self._show_error_message(str(e))

    async def _save_sell_property_async(self, prop_id: int, selling_price: float):
        try:
            await SafeAsyncExecutor.execute(self.property_service.sell_property, prop_id, selling_price, "")
            self._close_form_container()
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ü—Ä–æ–¥–∞–Ω–µ" –ø—ñ—Å–ª—è –ø—Ä–æ–¥–∞–∂—É
            await self.switch_tab("sold", force=True)
            
            await self._show_success_message(self.loc.get("properties_success_sold", default="–ü—Ä–æ–¥–∞–Ω–æ"))
        except Exception as e:
            await self._show_error_message(str(e))

    def _ensure_sell_dialog(self):
        # —Å—Ç–∞—Ä–∏–π –¥—ñ–∞–ª–æ–≥ –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è ‚Äî —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –æ–≤–µ—Ä–ª–µ–π —Ñ–æ—Ä–º–∏
            return

    def _confirm_sell(self):
        if self.page:
            self.page.run_task(self._confirm_sell_async)

    async def _confirm_sell_async(self):
        """–ë–µ–∑–ø–µ—á–Ω–æ –ø—Ä–æ–¥–∞—î –º–∞–π–Ω–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å"""
        try:
            prop = self.sell_dialog.data if self.sell_dialog else None
            if not prop:
                logger.error("No property data in sell dialog")
                await self._toast("–î–∞–Ω—ñ –º–∞–π–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", error=True)
                return
            
            profile = self.app_state.current_profile
            if not profile:
                logger.error("No current profile")
                await self._toast(self.loc.get("properties_profile_not_found", default="–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"), error=True)
                return
            
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ü—ñ–Ω–∏ –ø—Ä–æ–¥–∞–∂—É
            price_str = self.sell_price_input.value.strip() if self.sell_price_input else ""
            if not price_str:
                await self._toast("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –ø—Ä–æ–¥–∞–∂—É", error=True)
                return
            
            try:
                selling_price = float(price_str.replace(',', '.'))
                if selling_price <= 0:
                    await self._toast("–¶—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0", error=True)
                    return
                if selling_price > 999999999:
                    await self._toast(self.loc.get("properties_price_too_large", default="–¶—ñ–Ω–∞ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∞"), error=True)
                    return
            except (ValueError, TypeError):
                await self._toast("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ü—ñ–Ω–∏", error=True)
                return

            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ—Ç–∞—Ç–æ–∫
            notes = self.sell_notes_input.value.strip() if self.sell_notes_input else ""
            if len(notes) > 500:
                await self._toast("–ù–æ—Ç–∞—Ç–∫–∏ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥—ñ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª—ñ–≤)", error=True)
                return

            # –ü—Ä–æ–¥–∞—î–º–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å
            if prop and prop.get("id"):
                success = await SafeAsyncExecutor.execute(
                    self.property_service.sell_property,
                    prop.get("id"),
                    selling_price,
                    notes
                )
                
                if not success:
                    await self._toast("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂—É –º–∞–π–Ω–∞", error=True)
                    return
            
            # –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à
            # property_cache.invalidate_properties(profile["id"])  # –í–∏–¥–∞–ª–µ–Ω–æ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è
            
            # –°–ø–æ–≤—ñ—â–∞—î–º–æ —ñ–Ω—à—ñ –≤'—é –ø—Ä–æ –∑–º—ñ–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
            try:
                self.app_state.notify_transactions_change()
            except Exception:
                pass
            
            self._close_form_container()  # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ overlay —Ñ–æ—Ä–º—É
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ü—Ä–æ–¥–∞–Ω–µ" –ø—ñ—Å–ª—è –ø—Ä–æ–¥–∞–∂—É
            await self.switch_tab("sold", force=True)
            
            await self._toast(self.loc.get("properties_success_sold", default="–ü—Ä–æ–¥–∞–Ω–æ"))
            
        except Exception as e:
            logger.error(f"Error selling property: {e}")
            await self._toast(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂—É: {str(e)}", error=True)

    def _confirm_delete_async(self, prop: dict, from_sold: bool):
        """–ó–∞–ø—É—Å–∫–∞—î –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –ø—Ä–æ—Ü–µ—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–∞–π–Ω–∞"""
        logger.info(f"üîÑ Delete button clicked for property: {prop.get('name', 'Unknown')} (ID: {prop.get('id')})")
        if self.page:
            self.page.run_task(self._delete_property_async, prop, from_sold)
        else:
            logger.error("‚ùå No page available for delete operation")

    async def _delete_property_async(self, prop: dict, from_sold: bool):
        """–°—É—á–∞—Å–Ω–∏–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –ø—Ä–æ—Ü–µ—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–∞–π–Ω–∞"""
        try:
            logger.info(f"üîÑ Starting modern property delete for: {prop.get('name', 'Unknown')} (ID: {prop.get('id')})")
            
            # –ö—Ä–æ–∫ 1: –ü–æ–∫–∞–∑—É—î–º–æ –¥—ñ–∞–ª–æ–≥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            confirmed = await self._show_delete_confirmation(prop)
            if not confirmed:
                logger.info("‚ùå Delete operation cancelled by user")
                return
            
            # –ö—Ä–æ–∫ 2: –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            await self._show_loading_indicator("–í–∏–¥–∞–ª—è—î–º–æ –º–∞–π–Ω–æ...")
            
            # –ö—Ä–æ–∫ 3: –í–∏–∫–æ–Ω—É—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            success = await self._perform_delete_operation(prop)
            if not success:
                await self._hide_loading_indicator()
                await self._show_toast("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –º–∞–π–Ω–∞", error=True)
                return
            
            # –ö—Ä–æ–∫ 4: –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Ç–∞ –∫–µ—à
            await self._update_data_after_delete(prop)
            
            # –ö—Ä–æ–∫ 5: –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            await self._hide_loading_indicator()
            
            # –ö—Ä–æ–∫ 6: –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            await self._show_toast("–ú–∞–π–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            
            logger.info(f"‚úÖ Property delete completed successfully for: {prop.get('name', 'Unknown')}")
            
        except Exception as e:
            logger.error(f"‚ùå Error in delete operation: {e}")
            await self._hide_loading_indicator()
            await self._show_toast(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ: {str(e)}", error=True)

    async def _show_delete_confirmation(self, prop: dict) -> bool:
        """–ü–æ–∫–∞–∑—É—î –¥—ñ–∞–ª–æ–≥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"""
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥—ñ–∞–ª–æ–≥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            dialog = ft.AlertDialog(
                modal=True,
                title=ft.Text(self.loc.get("properties_confirm_delete", default="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è")),
                content=ft.Text(f"{self.loc.get('properties_confirm_delete_content', '–í–∏–¥–∞–ª–∏—Ç–∏ –º–∞–π–Ω–æ')} '{prop.get('name', 'Unknown')}'?\n\n{self.loc.get('properties_confirm_delete_warning', '–¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏.')}"),
                actions=[
                    ft.TextButton(self.loc.get("properties_cancel", default="–°–∫–∞—Å—É–≤–∞—Ç–∏"), on_click=lambda e: self._close_dialog_sync(dialog, False)),
                    ft.ElevatedButton(
                        self.loc.get("properties_delete", "–í–∏–¥–∞–ª–∏—Ç–∏"),
                        bgcolor=ft.Colors.RED_700,
                        color=ft.Colors.WHITE,
                        on_click=lambda e: self._close_dialog_sync(dialog, True)
                    )
                ],
                actions_alignment=ft.MainAxisAlignment.END
            )
            
            # –î–æ–¥–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ –¥–æ overlay
            if self.page and dialog not in self.page.overlay:
                self.page.overlay.append(dialog)
            
            # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥
            dialog.open = True
            self.page.update()
            
            # –ß–µ–∫–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return await self._wait_for_dialog_result(dialog)
            
        except Exception as e:
            logger.error(f"‚ùå Error showing delete confirmation: {e}")
            return False

    async def _perform_delete_operation(self, prop: dict) -> bool:
        """–í–∏–∫–æ–Ω—É—î –æ–ø–µ—Ä–∞—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–∞–π–Ω–∞"""
        try:
            logger.info(f"üîÑ Performing delete operation for property: {prop.get('name', 'Unknown')}")
            logger.info(f"üîÑ Property object: {prop}")
            
            profile = self.app_state.current_profile
            if not profile:
                logger.error("‚ùå No current profile")
                return False
            
            # –í–∏–¥–∞–ª—è—î–º–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å
            if prop and prop.get("id"):
                property_id = prop.get("id")
                logger.info(f"üîÑ Calling delete_property with ID: {property_id}")
                success = await SafeAsyncExecutor.execute(
                    self.property_service.delete_property,
                    property_id
                )
                
                if not success:
                    logger.error("‚ùå Delete operation failed")
                    return False
                
                logger.info(f"‚úÖ Delete operation completed successfully")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Error in delete operation: {e}")
            return False

    async def _update_data_after_delete(self, prop: dict):
        """–û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ —Ç–∞ –∫–µ—à –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"""
        try:
            logger.info(f"üîÑ Updating data and cache after delete...")
            
            profile = self.app_state.current_profile
            if not profile:
                logger.error("‚ùå No current profile")
                return
            
            # –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à
            # property_cache.invalidate_properties(profile["id"])  # –í–∏–¥–∞–ª–µ–Ω–æ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è
            
            # –°–ø–æ–≤—ñ—â–∞—î–º–æ —ñ–Ω—à—ñ –≤'—é –ø—Ä–æ –∑–º—ñ–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
            try:
                self.app_state.notify_transactions_change()
            except Exception:
                pass
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫
            await self._refresh_list()
            
            # –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–µ—à—É –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            logger.info(f"üîç Cache state after refresh: has_cache={hasattr(self, '_active_props_cache')}, cache_length={len(self._active_props_cache) if hasattr(self, '_active_props_cache') and self._active_props_cache else 0}")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ header –¥–ª—è –ø–æ–∫–∞–∑—É/–ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "+"
            self._update_header_for_tab()
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∫–Ω–æ–ø–∫–∏ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–∞–π–Ω–∞
            self._update_add_button_position()
            
            logger.info(f"‚úÖ Data and cache updated successfully")
            
        except Exception as e:
            logger.error(f"‚ùå Error updating data after delete: {e}")

    async def _open_dialog(self, dialog: ft.AlertDialog):
        if not self.page:
            logger.error("‚ùå No page available for _open_dialog")
            return
        logger.info(f"üîß Opening dialog: {dialog}")

        # –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ –¥–æ overlay, —è–∫—â–æ –π–æ–≥–æ —Ç–∞–º –Ω–µ–º–∞—î
        if dialog not in self.page.overlay:
            self.page.overlay.append(dialog)
            logger.info("üîß Dialog added to overlay")

        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥
        dialog.open = True

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
        self.page.update()
        logger.info(f"üîß Dialog opened successfully, dialog.open = {dialog.open}")

        # –°–ø—Ä–æ–±—É—î–º–æ —Ç–∞–∫–æ–∂ –æ–Ω–æ–≤–∏—Ç–∏ —Å–∞–º –¥—ñ–∞–ª–æ–≥
        try:
            dialog.update()
            logger.info("üîß Dialog.update() called")
        except Exception as e:
            logger.error(f"‚ùå Error updating dialog: {e}")

    def _close_dialog_sync(self, dialog: ft.AlertDialog, result: bool):
        """–ó–∞–∫—Ä–∏–≤–∞—î –¥—ñ–∞–ª–æ–≥ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            dialog.open = False
            dialog._result = result  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ
            self.page.update()
            logger.info(f"üîò Dialog closed with result: {result}")
        except Exception as e:
            logger.error(f"‚ùå Error in _close_dialog_sync: {e}")

    async def _close_dialog(self, dialog: Optional[ft.AlertDialog]):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–∫—Ä–∏–≤–∞—î –¥—ñ–∞–ª–æ–≥ —á–µ—Ä–µ–∑ overlay"""
        if not self.page:
            logger.error("‚ùå Cannot close dialog - no page")
            return
        
        try:
            if dialog:
                # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥—ñ–∞–ª–æ–≥
                logger.info(f"üîß Closing specific dialog: {dialog}")
                dialog.open = False
                if dialog in self.page.overlay:
                    self.page.overlay.remove(dialog)
                    logger.info("‚úÖ Dialog removed from overlay")
            else:
                # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –¥—ñ–∞–ª–æ–≥–∏ –≤ overlay
                logger.info("üîß Closing all dialogs in overlay")
                dialogs_to_remove = []
                for overlay_item in self.page.overlay:
                    if isinstance(overlay_item, ft.AlertDialog) and overlay_item.open:
                        dialogs_to_remove.append(overlay_item)
                
                for dialog_to_remove in dialogs_to_remove:
                    dialog_to_remove.open = False
                    self.page.overlay.remove(dialog_to_remove)
                    logger.info("‚úÖ Dialog removed from overlay")
            
            if self.page:
                self.page.update()
                logger.info("‚úÖ Dialog(s) closed successfully")
        except Exception as e:
            logger.error(f"‚ùå Error closing dialog: {e}")

    async def _toast(self, text: str, error: bool = False):
        if not self.page:
            return
        pass
        self.page.snack_bar = ft.SnackBar(
            content=ft.Text(text), bgcolor=(ft.Colors.RED_700 if error else ft.Colors.GREEN_700)
        )
        self.page.snack_bar.open = True
        self.page.update()



    def _update_preview(self):
        """–û–Ω–æ–≤–ª—é—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if not hasattr(self, 'preview_container') or not self.current_image_b64:
            return
            
        try:
            # –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            self.preview_container.content.controls.clear()
            
            # –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            self.preview_container.content.controls.append(
                ft.Text(self.loc.get("properties_preview", "–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥:"), size=16, color=ft.Colors.WHITE70, weight=ft.FontWeight.W_500)
            )
            
            # –î–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            if "," in self.current_image_b64:
                image = ft.Image(
                    src_base64=self.current_image_b64.split(",")[1],
                    width=280,
                    height=200,
                    fit=ft.ImageFit.COVER,
                    border_radius=12,
                )
            else:
                image = ft.Image(
                    src=self.current_image_b64,
                    width=280,
                    height=200,
                    fit=ft.ImageFit.COVER,
                    border_radius=12,
                )
            
            # –ö–Ω–æ–ø–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            remove_btn = ft.IconButton(
                icon=ft.Icons.CLOSE, 
                tooltip="–ü—Ä–∏–±—Ä–∞—Ç–∏", 
                on_click=lambda e: self._clear_photo(),
                icon_color=ft.Colors.GREY_50, 
                bgcolor=ft.Colors.with_opacity(0.35, ft.Colors.BLACK),
                style=ft.ButtonStyle(shape=ft.RoundedRectangleBorder(radius=8))
            )

            image_container = ft.Stack([
                ft.Container(content=image, border_radius=12, border=ft.border.all(1, ft.Colors.GREY_600)),
                ft.Container(content=remove_btn, right=6, top=6),
            ], width=280, height=200)
            
            self.preview_container.content.controls.append(image_container)
            if self.preview_container is not None:
                try:
                    self.preview_container.visible = True
                except Exception:
                    pass
            
            # –í–º–∏–∫–∞—î–º–æ —Å–∫—Ä–æ–ª –ª–∏—à–µ –∫–æ–ª–∏ —î –ø—Ä–µ–≤'—é
            if hasattr(self, 'form_body'):
                self.form_body.scroll = ft.ScrollMode.ADAPTIVE
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
            if self.page:
                self.page.update()
        except Exception:
            pass
            # –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ ‚Äî —Ö–æ–≤–∞—î–º–æ –±–ª–æ–∫ –ø—Ä–µ–≤'—é
            if hasattr(self, 'preview_container') and self.preview_container is not None:
                try:
                    if hasattr(self.preview_container, 'visible') and hasattr(self.preview_container, '_set_attr_internal'):
                        self.preview_container.visible = False
                except Exception:
                    pass
            if hasattr(self, 'form_body'):
                self.form_body.scroll = None
            if self.page:
                self.page.update()

    def _confirm_restore_sync(self, prop: dict):
        """–°—Ç–≤–æ—Ä—é—î –¥—ñ–∞–ª–æ–≥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è - —Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è"""
        try:
            logger.info(f"üîÑ Creating restore confirmation dialog for property: {prop.get('name', 'Unknown')} (ID: {prop.get('id')})")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
            profile = self.app_state.current_profile
            if not profile:
                logger.error("‚ùå No current profile found")
                return

            logger.info(f"‚úÖ Profile found: {profile.get('name', 'Unknown')}")

            if not self.page:
                logger.error("‚ùå Page is None")
                return

            # –û—á–∏—â–∞—î–º–æ overlay –ø–µ—Ä–µ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –¥—ñ–∞–ª–æ–≥—É
            logger.info("üîß Cleaning overlay before creating dialog...")
            self._simple_overlay_cleanup()

            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥—ñ–∞–ª–æ–≥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            confirm_dialog = ft.AlertDialog(
                modal=True,
                title=ft.Text(self.loc.get("properties_restore_property", default="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –º–∞–π–Ω–æ?")),
                content=ft.Text(f"{self.loc.get('properties_restore_confirm', '–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏')} '{prop.get('name', '')}' {self.loc.get('properties_restore_to_active', '–≤ –∞–∫—Ç–∏–≤–Ω–µ –º–∞–π–Ω–æ')}?"),
                actions=[
                    ft.TextButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", on_click=lambda e: self._handle_cancel_restore(confirm_dialog)),
                    ft.TextButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏", on_click=lambda e: self._handle_confirm_restore(prop, confirm_dialog)),
                ],
                actions_alignment=ft.MainAxisAlignment.END,
            )

            logger.info("üîß Setting up restore confirmation dialog...")

            # –î–æ–¥–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ –¥–æ overlay
            self.page.overlay.append(confirm_dialog)
            confirm_dialog.open = True

            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
            self.page.update()

            logger.info("‚úÖ Restore confirmation dialog opened successfully")

        except Exception as e:
            logger.error(f"‚ùå Error in _confirm_restore_sync: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")

            # –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ —Ç–∞–∫–æ–∂ –æ—á–∏—â–∞—î–º–æ overlay
            try:
                self._simple_overlay_cleanup()
            except:
                pass

    def _handle_cancel_restore(self, dialog: ft.AlertDialog):
        """–û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫—É '–°–∫–∞—Å—É–≤–∞—Ç–∏' –≤ –¥—ñ–∞–ª–æ–∑—ñ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è"""
        try:
            logger.info("üîò Button '–°–∫–∞—Å—É–≤–∞—Ç–∏' clicked in dialog")

            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ —ñ –æ—á–∏—â–∞—î–º–æ overlay
            dialog.open = False
            if dialog in self.page.overlay:
                self.page.overlay.remove(dialog)
            self.page.update()

            logger.info("‚úÖ Restore dialog cancelled")
        except Exception as e:
            logger.error(f"‚ùå Error in _handle_cancel_restore: {e}")
            # –ê–≤–∞—Ä—ñ–π–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            try:
                self._simple_overlay_cleanup()
            except:
                pass

    def _handle_confirm_restore(self, prop: dict, dialog: ft.AlertDialog):
        """–û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫—É '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏' –≤ –¥—ñ–∞–ª–æ–∑—ñ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è"""
        try:
            logger.info("üîò Button '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏' clicked in dialog")

            # –ù–ï –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ —Ç—É—Ç - —Ü–µ –∑—Ä–æ–±–∏—Ç—å —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
            # –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
            self._handle_perform_restore_wrapper(prop, dialog)

        except Exception as e:
            logger.error(f"‚ùå Error in _handle_confirm_restore: {e}")
            # –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ —ñ –æ—á–∏—â–∞—î–º–æ overlay
            try:
                dialog.open = False
                if dialog in self.page.overlay:
                    self.page.overlay.remove(dialog)
                self.page.update()
                self._simple_overlay_cleanup()
            except:
                pass

    async def _confirm_restore_async(self, prop: dict):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å—Ç–≤–æ—Ä—é—î –¥—ñ–∞–ª–æ–≥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è"""
        try:
            logger.info(f"üîÑ Starting restore confirmation for property: {prop.get('name', 'Unknown')} (ID: {prop.get('id')})")
            
            profile = self.app_state.current_profile
            if not profile:
                logger.error("‚ùå No current profile found")
                await self._toast(self.loc.get("properties_profile_not_found", default="–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"), error=True)
                return
            
            logger.info(f"‚úÖ Profile found: {profile.get('name', 'Unknown')}")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥—ñ–∞–ª–æ–≥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            confirm_dialog = ft.AlertDialog(
                modal=True,
                title=ft.Text(self.loc.get("properties_restore_property", default="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –º–∞–π–Ω–æ?")),
                content=ft.Text(f"{self.loc.get('properties_restore_confirm', '–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏')} '{prop.get('name', '')}' {self.loc.get('properties_restore_to_active', '–≤ –∞–∫—Ç–∏–≤–Ω–µ –º–∞–π–Ω–æ')}?"),
                actions=[
                    ft.TextButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", on_click=lambda e: self._close_dialog_sync(confirm_dialog)),
                    ft.TextButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏", on_click=lambda e: self._handle_perform_restore_wrapper(prop, confirm_dialog)),
                ],
                actions_alignment=ft.MainAxisAlignment.END,
            )
            
            if self.page:
                # –î–æ–¥–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ –¥–æ overlay
                self.page.overlay.append(confirm_dialog)
                confirm_dialog.open = True
                self.page.update()
                logger.info("‚úÖ Restore confirmation dialog opened")
            else:
                logger.error("‚ùå Page is None in _confirm_restore_async")
                
        except Exception as e:
            logger.error(f"‚ùå Error in _confirm_restore_async: {e}")
            await self._toast(f"{self.loc.get('properties_error', default='–ü–æ–º–∏–ª–∫–∞:')} {str(e)}", error=True)

    async def _handle_perform_restore(self, prop: dict, dialog: ft.AlertDialog):
        """–í–∏–∫–æ–Ω—É—î –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –º–∞–π–Ω–∞ –∑ –ø—Ä–æ–¥–∞–Ω–æ–≥–æ –≤ –∞–∫—Ç–∏–≤–Ω–µ - –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–æ –∑ –Ω—É–ª—è"""
        logger.info(f"üîÑ Starting property restore for: {prop.get('name', 'Unknown')} (ID: {prop.get('id')})")

        try:
            # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
            profile = self.app_state.current_profile
            if not profile:
                logger.error("‚ùå No current profile found")
                await self._show_error_toast("–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return

            logger.info(f"‚úÖ Profile found: {profile.get('name', 'Unknown')}")

            # 2. –ù–ï –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ —Ç—É—Ç - –∑—Ä–æ–±–∏–º–æ —Ü–µ –ø—ñ—Å–ª—è –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
            # –¶–µ –∑–∞–ø–æ–±—ñ–≥–∞—î –ø—Ä–æ–±–ª–µ–º–∞–º –∑ overlay

            # 3. –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å
            logger.info("üîÑ Executing property restore service...")
            success = await SafeAsyncExecutor.execute(
                self.property_service.restore_property,
                prop.get("id")
            )

            if not success:
                logger.error("‚ùå Property restore service failed")
                await self._show_error_toast("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –º–∞–π–Ω–∞")
                return

            logger.info("‚úÖ Property restore service completed successfully")

            # 4. –¢–µ–ø–µ—Ä –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
            logger.info("üîÑ Closing dialog after successful restore...")
            await self._close_dialog(dialog)

            # 5. –û—á–∏—â–∞—î–º–æ –≤–µ—Å—å overlay –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º UI
            logger.info("üîÑ Cleaning overlay before UI update...")
            self._simple_overlay_cleanup()

            # 6. –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
            logger.info("üîÑ Updating data and cache...")
            # property_cache.invalidate_properties(profile["id"])  # –í–∏–¥–∞–ª–µ–Ω–æ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è
            self.app_state.notify_transactions_change()

            # 7. –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É "active" —è–∫—â–æ –∑–∞—Ä–∞–∑ –Ω–∞ "sold"
            if self.selected_tab == "sold":
                logger.info("üîÑ Switching to active tab after restore...")
                await self.switch_tab("active", force=True)
            else:
                # 8. –û–Ω–æ–≤–ª—é—î–º–æ UI –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏ –∑ –ø—Ä–∏–º—É—Å–æ–≤–∏–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º
                logger.info("üîÑ Refreshing UI for current tab...")
                await self._refresh_list(force_refresh=True)

            # 9. –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            logger.info("‚úÖ Property restored successfully")
            await self._show_success_toast("–ú–∞–π–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –≤ –∞–∫—Ç–∏–≤–Ω–µ")

        except Exception as e:
            logger.error(f"‚ùå Error in property restore: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")

            # –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ —ñ –æ—á–∏—â–∞—î–º–æ overlay
            try:
                await self._close_dialog(dialog)
                self._simple_overlay_cleanup()
            except:
                pass

            await self._show_error_toast(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ: {str(e)}")

    async def _show_success_toast(self, message: str):
        """–ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö"""
        try:
            if self.page:
                self.page.snack_bar = ft.SnackBar(
                    content=ft.Text(message),
                    bgcolor=ft.Colors.GREEN_700
                )
                self.page.snack_bar.open = True
                self.page.update()
        except Exception as e:
            logger.error(f"‚ùå Error showing success toast: {e}")

    async def _show_error_toast(self, message: str):
        """–ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É"""
        try:
            if self.page:
                self.page.snack_bar = ft.SnackBar(
                    content=ft.Text(message),
                    bgcolor=ft.Colors.RED_700
                )
                self.page.snack_bar.open = True
                self.page.update()
        except Exception as e:
            logger.error(f"‚ùå Error showing error toast: {e}")

    def _handle_restore_click(self, prop: dict):
        """–û–±—Ä–æ–±–ª—è—î –∫–ª—ñ–∫ –ø–æ –∫–Ω–æ–ø—Ü—ñ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è - –Ω–æ–≤–∞ —Å—É—á–∞—Å–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è"""
        try:
            logger.info(f"üîÑ Restore button clicked for property: {prop.get('name', 'Unknown')} (ID: {prop.get('id')})")
            
            if not self.page:
                logger.error("‚ùå Page is None")
                return
                
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –ø—Ä–æ—Ü–µ—Å –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
            self.page.run_task(self._restore_property_async, prop)
            
        except Exception as e:
            logger.error(f"‚ùå Error in _handle_restore_click: {e}")

    async def _restore_property_async(self, prop: dict):
        """–°—É—á–∞—Å–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –º–∞–π–Ω–∞"""
        try:
            logger.info(f"üîÑ Starting modern property restore for: {prop.get('name', 'Unknown')} (ID: {prop.get('id')})")
            
            # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
            profile = self.app_state.current_profile
            if not profile:
                logger.error("‚ùå No current profile found")
                await self._show_toast("–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", error=True)
                return

            # 2. –ü–æ–∫–∞–∑—É—î–º–æ –¥—ñ–∞–ª–æ–≥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            confirmed = await self._show_restore_confirmation(prop)
            if not confirmed:
                logger.info("üîÑ Restore cancelled by user")
                return

            # 3. –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            await self._show_loading_indicator("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–∞–π–Ω–æ...")

            # 4. –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
            success = await self._perform_restore_operation(prop, profile)
            if not success:
                await self._hide_loading_indicator()
                await self._show_toast("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –º–∞–π–Ω–∞", error=True)
                return

            # 5. –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Ç–∞ –∫–µ—à
            await self._update_data_after_restore(profile)

            # 6. –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É –≤–∫–ª–∞–¥–∫—É
            await self._switch_to_active_tab()

            # 7. –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            await self._hide_loading_indicator()

            # 8. –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            await self._show_toast("–ú–∞–π–Ω–æ —É—Å–ø—ñ—à–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –≤ –∞–∫—Ç–∏–≤–Ω–µ", success=True)

            logger.info("‚úÖ Property restore completed successfully")

        except Exception as e:
            logger.error(f"‚ùå Error in _restore_property_async: {e}")
            await self._hide_loading_indicator()
            await self._show_toast(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}", error=True)

    async def _show_restore_confirmation(self, prop: dict) -> bool:
        """–ü–æ–∫–∞–∑—É—î –¥—ñ–∞–ª–æ–≥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è"""
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥—ñ–∞–ª–æ–≥
            dialog = ft.AlertDialog(
                modal=True,
                title=ft.Text(self.loc.get("properties_restore_property", default="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –º–∞–π–Ω–æ?")),
                content=ft.Text(f"{self.loc.get('properties_restore_confirm', '–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏')} '{prop.get('name', '')}' {self.loc.get('properties_restore_to_active', '–≤ –∞–∫—Ç–∏–≤–Ω–µ –º–∞–π–Ω–æ')}?"),
                actions=[
                    ft.TextButton(self.loc.get("properties_cancel", default="–°–∫–∞—Å—É–≤–∞—Ç–∏"), on_click=lambda e: self._close_dialog_sync(dialog, False)),
                    ft.TextButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏", on_click=lambda e: self._close_dialog_sync(dialog, True)),
                ],
                actions_alignment=ft.MainAxisAlignment.END,
            )

            # –î–æ–¥–∞—î–º–æ –¥–æ overlay
            self.page.overlay.append(dialog)
            dialog.open = True
            self.page.update()

            # –û—á—ñ–∫—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = await self._wait_for_dialog_result(dialog)
            
            # –û—á–∏—â–∞—î–º–æ overlay
            self._simple_overlay_cleanup()
            
            return result

        except Exception as e:
            logger.error(f"‚ùå Error in _show_restore_confirmation: {e}")
            return False

    async def _wait_for_dialog_result(self, dialog: ft.AlertDialog) -> bool:
        """–û—á—ñ–∫—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥—ñ–∞–ª–æ–≥—É"""
        try:
            # –û—á—ñ–∫—É—î–º–æ –ø–æ–∫–∏ –¥—ñ–∞–ª–æ–≥ –∑–∞–∫—Ä–∏—î—Ç—å—Å—è
            while dialog.open:
                await asyncio.sleep(0.1)
            
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return getattr(dialog, '_result', False)
        except Exception as e:
            logger.error(f"‚ùå Error in _wait_for_dialog_result: {e}")
            return False

    async def _show_loading_indicator(self, message: str):
        """–ü–æ–∫–∞–∑—É—î —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"""
        try:
            if self.page:
                self.page.snack_bar = ft.SnackBar(
                    content=ft.Row([
                        ft.ProgressRing(width=16, height=16, stroke_width=2),
                        ft.Text(message)
                    ], spacing=10),
                    bgcolor=ft.Colors.BLUE_700
                )
                self.page.snack_bar.open = True
                self.page.update()
        except Exception as e:
            logger.error(f"‚ùå Error in _show_loading_indicator: {e}")

    async def _hide_loading_indicator(self):
        """–ü—Ä–∏—Ö–æ–≤—É—î —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"""
        try:
            if self.page and self.page.snack_bar:
                self.page.snack_bar.open = False
                self.page.update()
        except Exception as e:
            logger.error(f"‚ùå Error in _hide_loading_indicator: {e}")

    async def _perform_restore_operation(self, prop: dict, profile: dict) -> bool:
        """–í–∏–∫–æ–Ω—É—î –æ–ø–µ—Ä–∞—Ü—ñ—é –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –º–∞–π–Ω–∞"""
        try:
            logger.info(f"üîÑ Performing restore operation for property: {prop.get('name', 'Unknown')}")
            
            # –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å
            success = await SafeAsyncExecutor.execute(
                self.property_service.restore_property,
                prop.get("id")
            )

            if success:
                logger.info("‚úÖ Restore operation completed successfully")
                return True
            else:
                logger.error("‚ùå Restore operation failed")
                return False

        except Exception as e:
            logger.error(f"‚ùå Error in _perform_restore_operation: {e}")
            return False

    async def _update_data_after_restore(self, profile: dict):
        """–û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ —Ç–∞ –∫–µ—à –ø—ñ—Å–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è"""
        try:
            logger.info("üîÑ Updating data and cache after restore...")
            
            # –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à
            # property_cache.invalidate_properties(profile["id"])  # –í–∏–¥–∞–ª–µ–Ω–æ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è
            
            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –∑–º—ñ–Ω–∏
            self.app_state.notify_transactions_change()
            
            logger.info("‚úÖ Data and cache updated successfully")
            
        except Exception as e:
            logger.error(f"‚ùå Error in _update_data_after_restore: {e}")

    async def _switch_to_active_tab(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞—î—Ç—å—Å—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É –≤–∫–ª–∞–¥–∫—É"""
        try:
            logger.info("üîÑ Switching to active tab...")
            
            if self.selected_tab != "active":
                await self.switch_tab("active", force=True)
            else:
                # –Ø–∫—â–æ –≤–∂–µ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ–π –≤–∫–ª–∞–¥—Ü—ñ, –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
                await self._refresh_list(force_refresh=True)
            
            logger.info("‚úÖ Switched to active tab successfully")
            
        except Exception as e:
            logger.error(f"‚ùå Error in _switch_to_active_tab: {e}")

    async def _show_toast(self, message: str, error: bool = False, success: bool = False):
        """–ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        try:
            if self.page:
                bgcolor = ft.Colors.RED_700 if error else (ft.Colors.GREEN_700 if success else ft.Colors.BLUE_700)
                self.page.snack_bar = ft.SnackBar(
                    content=ft.Text(message),
                    bgcolor=bgcolor
                )
                self.page.snack_bar.open = True
                self.page.update()
        except Exception as e:
            logger.error(f"‚ùå Error in _show_toast: {e}")

    def _test_dialog_sync(self):
        """–°—Ç–≤–æ—Ä—é—î –ø—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–Ω–æ–ø–æ–∫"""
        try:
            logger.info("üß™ Creating test dialog")
            
            # –°–ø—Ä–æ–±—É—î–º–æ Banner –∑–∞–º—ñ—Å—Ç—å AlertDialog
            test_banner = ft.Banner(
                bgcolor=ft.Colors.AMBER_100,
                leading=ft.Icon(ft.icons.WARNING_AMBER_ROUNDED, color=ft.Colors.AMBER, size=20),
                content=ft.Text(
                    "–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –±–∞–Ω–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–Ω–æ–ø–æ–∫"
                ),
                actions=[
                    ft.TextButton("–¢–µ—Å—Ç 1", on_click=lambda e: logger.info("üîò Test button 1 clicked")),
                    ft.TextButton("–¢–µ—Å—Ç 2", on_click=lambda e: logger.info("üîò Test button 2 clicked")),
                ],
            )
            
            if self.page:
                self.page.banner = test_banner
                test_banner.open = True
                self.page.update()
                logger.info("‚úÖ Test banner opened")
            else:
                logger.error("‚ùå Page is None in _test_dialog_sync")
                
        except Exception as e:
            logger.error(f"‚ùå Error in _test_dialog_sync: {e}")

    def _handle_perform_restore_wrapper(self, prop: dict, dialog: ft.AlertDialog):
        """Wrapper –¥–ª—è –≤–∏–∫–ª–∏–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è"""
        try:
            logger.info(f"üîÑ _handle_perform_restore_wrapper called for property: {prop.get('name', 'Unknown')} (ID: {prop.get('id')})")
            if self.page:
                self.page.run_task(self._handle_perform_restore, prop, dialog)
                logger.info("‚úÖ Task scheduled successfully")
            else:
                logger.error("‚ùå Page is None in _handle_perform_restore_wrapper")
        except Exception as e:
            logger.error(f"‚ùå Error in _handle_perform_restore_wrapper: {e}")

    def _on_sold_card_click(self, e):
        """–û–±—Ä–æ–±–ª—è—î –∫–ª—ñ–∫ –ø–æ –∫–∞—Ä—Ç—Ü—ñ –ø—Ä–æ–¥–∞–Ω–æ–≥–æ –º–∞–π–Ω–∞"""
        try:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ Container –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ GestureDetector
            container = e.control.content
            if hasattr(container, 'opacity'):
                # –ü—Ä–∏ –∫–ª—ñ–∫—É —Ä–æ–±–∏–º–æ –∫–∞—Ä—Ç–∫—É –∫–æ–ª—å–æ—Ä–æ–≤–æ—é –Ω–∞–∑–∞–≤–∂–¥–∏
                container.opacity = 1.0
                logger.info("‚úÖ Card opacity set to 1.0")
                
                # –¢–∞–∫–æ–∂ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —Å—ñ—Ä–∏–π —Ñ—ñ–ª—å—Ç—Ä –∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å
                self._remove_gray_filter_from_images(container)
                logger.info("‚úÖ Gray filter removal completed")
                
                if self.page:
                    self.page.update()
                    logger.info("‚úÖ Page updated after click")
        except Exception as ex:
            logger.error(f"Error in _on_sold_card_click: {ex}")

    def _remove_gray_filter_from_images(self, container):
        """–ü—Ä–∏–±–∏—Ä–∞—î —Å—ñ—Ä–∏–π —Ñ—ñ–ª—å—Ç—Ä –∑ —É—Å—ñ—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∞–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            if isinstance(container, ft.Image):
                container.color = None
                container.color_blend_mode = None
                logger.info("‚úÖ Removed gray filter from direct Image")
                return
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ content –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            if hasattr(container, 'content'):
                if isinstance(container.content, ft.Image):
                    container.content.color = None
                    container.content.color_blend_mode = None
                    logger.info("‚úÖ Removed gray filter from Image in content")
                else:
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ content
                    self._remove_gray_filter_from_images(container.content)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ controls —è–∫—â–æ —î
            if hasattr(container, 'controls'):
                for control in container.controls:
                    self._remove_gray_filter_from_images(control)
                    
        except Exception as ex:
            logger.error(f"Error removing gray filter: {ex}")
    
    async def _on_lang_change(self, lang_code: str):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω–∏ –º–æ–≤–∏"""
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –±–∞–∑–æ–≤–∏–π –º–µ—Ç–æ–¥
        await super()._on_lang_change(lang_code)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        if hasattr(self, 'page_title_text'):
            self.page_title_text.value = self.loc.get("properties_title", default="–ú–∞–π–Ω–æ")
        
        # –õ–µ–≥–∫–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        self._update_localization()
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—î–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞–π–Ω–∞ –∑ –Ω–æ–≤–∏–º–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∞–º–∏
        await self._recreate_cards_with_new_language()
        
        if self.page:
            self.page.update()
    
    def _close_all_dialogs(self):
        """–ó–∞–∫—Ä–∏–≤–∞—î –≤—Å—ñ –¥—ñ–∞–ª–æ–≥–∏ –ø—Ä–∏ –≤—Ç—Ä–∞—Ç—ñ —Ñ–æ–∫—É—Å—É"""
        try:
            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—Å—ñ –¥—ñ–∞–ª–æ–≥–∏ –º–∞–π–Ω–∞
            dialog_attributes = [
                'add_property_dialog', 'edit_property_dialog', 'sell_property_dialog',
                'confirm_delete_dialog', 'confirm_restore_dialog'
            ]
            
            for attr_name in dialog_attributes:
                if hasattr(self, attr_name):
                    dialog = getattr(self, attr_name)
                    if dialog and hasattr(dialog, 'open'):
                        dialog.open = False
            
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ –±–∞–∑–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤
            super()._close_all_dialogs()
        except Exception as e:
            print(f"Error closing property dialogs: {e}")
    
    def _restore_focus(self):
        """–í—ñ–¥–Ω–æ–≤–ª—é—î —Ñ–æ–∫—É—Å –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–ª—è –ø—ñ—Å–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –¥–æ–¥–∞—Ç–∫—É"""
        try:
            # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Ñ–æ–∫—É—Å –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—ñ
            if hasattr(self, 'sell_price_input') and self.sell_price_input:
                self.sell_price_input.focus()
            elif hasattr(self, 'sell_notes_input') and self.sell_notes_input:
                self.sell_notes_input.focus()
            elif hasattr(self, 'input_name') and self.input_name:
                self.input_name.focus()
            elif hasattr(self, 'input_price') and self.input_price:
                self.input_price.focus()
            else:
                # Fallback –¥–æ –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥—É
                super()._restore_focus()
        except Exception as e:
            print(f"Error restoring focus in properties view: {e}")
    
    def _update_localization(self):
        """–û–Ω–æ–≤–ª—é—î –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –º–æ–≤–∏"""
        try:
            # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞ –∫–Ω–æ–ø–∫–∏
            if hasattr(self, 'total_label'):
                self.total_label.value = self.loc.get("properties_total_value", default="–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:")
            
            if hasattr(self, 'btn_tab_active') and self.btn_tab_active and hasattr(self.btn_tab_active, 'content') and self.btn_tab_active.content:
                self.btn_tab_active.content.value = self.loc.get("properties_tab_active", default="–ê–∫—Ç–∏–≤–Ω–µ")
                # –î–∏–Ω–∞–º—ñ—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —à–∏—Ä–∏–Ω—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–æ–≤–∏
                current_lang = self.loc.current_language
                if current_lang == 'ru':
                    self.btn_tab_active.width = 150  # –ë—ñ–ª—å—à–µ –º—ñ—Å—Ü—è –¥–ª—è —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó
                else:
                    self.btn_tab_active.width = 140
            
            if hasattr(self, 'btn_tab_sold') and self.btn_tab_sold and hasattr(self.btn_tab_sold, 'content') and self.btn_tab_sold.content:
                self.btn_tab_sold.content.value = self.loc.get("properties_tab_sold", default="–ü—Ä–æ–¥–∞–Ω–µ")
                # –î–∏–Ω–∞–º—ñ—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —à–∏—Ä–∏–Ω—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–æ–≤–∏
                current_lang = self.loc.current_language
                if current_lang == 'ru':
                    self.btn_tab_sold.width = 150  # –ë—ñ–ª—å—à–µ –º—ñ—Å—Ü—è –¥–ª—è —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó
                else:
                    self.btn_tab_sold.width = 140
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è
            if hasattr(self, 'add_button'):
                self.add_button.text = self.loc.get("properties_add_new", default="–î–æ–¥–∞—Ç–∏ –º–∞–π–Ω–æ")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å (–∑–∞–≥–æ–ª–æ–≤–æ–∫)
            if hasattr(self, 'total_label'):
                self.total_label.value = self.loc.get("properties_total_value", default="–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –¥—ñ–∞–ª–æ–≥–∏, —è–∫—â–æ –≤–æ–Ω–∏ –≤—ñ–¥–∫—Ä–∏—Ç—ñ
            self._update_dialog_localization()
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∫–∏ –º–∞–π–Ω–∞ (—è–∫—â–æ –≤–æ–Ω–∏ –≤—ñ–¥—Ä–µ–Ω–¥–µ—Ä–µ–Ω—ñ)
            self._update_cards_localization()
            
            # –û–Ω–æ–≤–ª—é—î–º–æ dashboard —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self._update_dashboard_localization()
            
            # –û–Ω–æ–≤–ª—é—î–º–æ placeholder –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            self._update_placeholder_localization()
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏
            self._update_error_messages_localization()
            
            # –û–Ω–æ–≤–ª—é—î–º–æ snackbar –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            self._update_snackbar_localization()
                
        except Exception as ex:
            logger.error(f"Error updating localization in PropertiesView: {ex}")
    
    def _update_cards_localization(self):
        """–û–Ω–æ–≤–ª—é—î –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –≤ –∫–∞—Ä—Ç–∫–∞—Ö –º–∞–π–Ω–∞"""
        try:
            # –û–Ω–æ–≤–ª—é—î–º–æ tooltip'–∏ –∫–Ω–æ–ø–æ–∫
            if hasattr(self, 'list_container') and hasattr(self.list_container, 'content'):
                self._update_cards_content_localization(self.list_container.content)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞–π–Ω–∞
            self._update_all_cards()
        except Exception as ex:
            logger.error(f"Error updating cards localization: {ex}")
    
    def _update_all_cards(self):
        """–û–Ω–æ–≤–ª—é—î –≤—Å—ñ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞–π–Ω–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –º–æ–≤–∏"""
        try:
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ list_container
            if hasattr(self, 'list_container') and hasattr(self.list_container, 'content'):
                self._update_cards_in_container(self.list_container.content)
        except Exception as ex:
            logger.error(f"Error updating all cards: {ex}")
    
    def _update_cards_in_container(self, content):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–Ω–æ–≤–ª—é—î –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ"""
        try:
            if hasattr(content, 'controls'):
                for control in content.controls:
                    # –û–Ω–æ–≤–ª—é—î–º–æ Text –µ–ª–µ–º–µ–Ω—Ç–∏ –≤ –∫–∞—Ä—Ç–∫–∞—Ö
                    if isinstance(control, ft.Text):
                        if hasattr(control, 'value'):
                            # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç–∏
                            if "–î–æ–¥–∞–Ω–æ:" in control.value:
                                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞—Ç—É, –∞–ª–µ –æ–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å
                                parts = control.value.split(" ", 1)
                                if len(parts) > 1:
                                    control.value = f"{self.loc.get('properties_added_date', default='–î–æ–¥–∞–Ω–æ:')} {parts[1]}"
                            elif "–ù–µ–≤—ñ–¥–æ–º–æ" in control.value:
                                control.value = control.value.replace("–ù–µ–≤—ñ–¥–æ–º–æ", self.loc.get("properties_unknown", default="–ù–µ–≤—ñ–¥–æ–º–æ"))
                            elif "–ù–µ–º–∞—î —Ñ–æ—Ç–æ" in control.value:
                                control.value = self.loc.get("properties_no_photo", default="–ù–µ–º–∞—î —Ñ–æ—Ç–æ")
                    
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –≤–∫–ª–∞–¥–µ–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
                    elif hasattr(control, 'controls'):
                        self._update_cards_in_container(control)
        except Exception as ex:
            logger.error(f"Error updating cards in container: {ex}")
    
    def _update_dashboard_localization(self):
        """–û–Ω–æ–≤–ª—é—î –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –≤ dashboard —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Ö"""
        try:
            # –û–Ω–æ–≤–ª—é—î–º–æ dashboard –≤ list_container
            if hasattr(self, 'list_container') and hasattr(self.list_container, 'content'):
                self._update_dashboard_in_container(self.list_container.content)
        except Exception as ex:
            logger.error(f"Error updating dashboard localization: {ex}")
    
    def _update_dashboard_in_container(self, content):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–Ω–æ–≤–ª—é—î dashboard —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ"""
        try:
            if hasattr(content, 'controls'):
                for control in content.controls:
                    # –û–Ω–æ–≤–ª—é—î–º–æ Text –µ–ª–µ–º–µ–Ω—Ç–∏ –≤ dashboard
                    if isinstance(control, ft.Text):
                        if hasattr(control, 'value'):
                            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                            if "–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫" in control.value:
                                control.value = self.loc.get("properties_total_profit", default="–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫")
                            elif "–°–µ—Ä–µ–¥–Ω—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å" in control.value:
                                control.value = self.loc.get("properties_avg_profitability", default="–°–µ—Ä–µ–¥–Ω—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å")
                            elif "–ü—Ä–æ–¥–∞–Ω–æ –º–∞–π–Ω–∞" in control.value:
                                control.value = self.loc.get("properties_sold_count", default="–ü—Ä–æ–¥–∞–Ω–æ –º–∞–π–Ω–∞")
                            elif "–£—Å–ø—ñ—à–Ω–∏—Ö —É–≥–æ–¥" in control.value:
                                control.value = self.loc.get("properties_successful_deals", default="–£—Å–ø—ñ—à–Ω–∏—Ö —É–≥–æ–¥")
                            elif "–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å" in control.value:
                                control.value = self.loc.get("properties_total_value_active", default="–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å")
                            elif "–ê–∫—Ç–∏–≤–Ω–µ –º–∞–π–Ω–æ" in control.value:
                                control.value = self.loc.get("properties_active_count", default="–ê–∫—Ç–∏–≤–Ω–µ –º–∞–π–Ω–æ")
                            elif "–°–µ—Ä–µ–¥–Ω—è –≤–∞—Ä—Ç—ñ—Å—Ç—å" in control.value:
                                control.value = self.loc.get("properties_avg_value", default="–°–µ—Ä–µ–¥–Ω—è –≤–∞—Ä—Ç—ñ—Å—Ç—å")
                            elif "–ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫" in control.value:
                                control.value = self.loc.get("properties_potential_profit", default="–ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫")
                    
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –≤–∫–ª–∞–¥–µ–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
                    elif hasattr(control, 'controls'):
                        self._update_dashboard_in_container(control)
        except Exception as ex:
            logger.error(f"Error updating dashboard in container: {ex}")
    
    def _update_placeholder_localization(self):
        """–û–Ω–æ–≤–ª—é—î –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –≤ placeholder –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö"""
        try:
            # –û–Ω–æ–≤–ª—é—î–º–æ placeholder –≤ list_container
            if hasattr(self, 'list_container') and hasattr(self.list_container, 'content'):
                self._update_placeholder_in_container(self.list_container.content)
        except Exception as ex:
            logger.error(f"Error updating placeholder localization: {ex}")
    
    def _update_placeholder_in_container(self, content):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–Ω–æ–≤–ª—é—î placeholder –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ"""
        try:
            if hasattr(content, 'controls'):
                for control in content.controls:
                    # –û–Ω–æ–≤–ª—é—î–º–æ Text –µ–ª–µ–º–µ–Ω—Ç–∏ –≤ placeholder
                    if isinstance(control, ft.Text):
                        if hasattr(control, 'value'):
                            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                            if "–ù–µ–º–∞—î –º–∞–π–Ω–∞" in control.value:
                                control.value = self.loc.get("properties_list_empty", default="–ù–µ–º–∞—î –º–∞–π–Ω–∞")
                            elif "–ù–µ–º–∞—î –ø—Ä–æ–¥–∞–Ω–æ–≥–æ –º–∞–π–Ω–∞" in control.value:
                                control.value = self.loc.get("properties_list_empty_sold", default="–ù–µ–º–∞—î –ø—Ä–æ–¥–∞–Ω–æ–≥–æ –º–∞–π–Ω–∞")
                    
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –≤–∫–ª–∞–¥–µ–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
                    elif hasattr(control, 'controls'):
                        self._update_placeholder_in_container(control)
        except Exception as ex:
            logger.error(f"Error updating placeholder in container: {ex}")
    
    def _update_error_messages_localization(self):
        """–û–Ω–æ–≤–ª—é—î –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏"""
        try:
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ –≤ list_container
            if hasattr(self, 'list_container') and hasattr(self.list_container, 'content'):
                self._update_error_messages_in_container(self.list_container.content)
        except Exception as ex:
            logger.error(f"Error updating error messages localization: {ex}")
    
    def _update_error_messages_in_container(self, content):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–Ω–æ–≤–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ"""
        try:
            if hasattr(content, 'controls'):
                for control in content.controls:
                    # –û–Ω–æ–≤–ª—é—î–º–æ Text –µ–ª–µ–º–µ–Ω—Ç–∏ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏
                    if isinstance(control, ft.Text):
                        if hasattr(control, 'value'):
                            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏
                            if "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:" in control.value:
                                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏, –∞–ª–µ –æ–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å
                                parts = control.value.split(":", 1)
                                if len(parts) > 1:
                                    control.value = f"{self.loc.get('properties_loading_error', default='–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:')}{parts[1]}"
                    
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –≤–∫–ª–∞–¥–µ–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
                    elif hasattr(control, 'controls'):
                        self._update_error_messages_in_container(control)
        except Exception as ex:
            logger.error(f"Error updating error messages in container: {ex}")
    
    def _update_snackbar_localization(self):
        """–û–Ω–æ–≤–ª—é—î –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –≤ snackbar –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö"""
        try:
            # –û–Ω–æ–≤–ª—é—î–º–æ snackbar –≤ page overlay
            if self.page and hasattr(self.page, 'overlay'):
                for overlay_item in self.page.overlay:
                    if isinstance(overlay_item, ft.SnackBar):
                        if hasattr(overlay_item, 'content') and hasattr(overlay_item.content, 'value'):
                            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ snackbar
                            if "–í –±—É—Ñ–µ—Ä—ñ –æ–±–º—ñ–Ω—É –Ω–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è" in overlay_item.content.value:
                                overlay_item.content.value = self.loc.get("properties_clipboard_no_image", default="–í –±—É—Ñ–µ—Ä—ñ –æ–±–º—ñ–Ω—É –Ω–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
                            elif "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É!" in overlay_item.content.value:
                                overlay_item.content.value = self.loc.get("properties_image_pasted", default="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É!")
                            elif "–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!" in overlay_item.content.value:
                                overlay_item.content.value = self.loc.get("properties_photo_added_success", default="–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        except Exception as ex:
            logger.error(f"Error updating snackbar localization: {ex}")
    
    async def _recreate_cards_with_new_language(self):
        """–ü–µ—Ä–µ—Å–æ–∑–¥–∞—î –≤—Å—ñ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞–π–Ω–∞ –∑ –Ω–æ–≤–∏–º–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∞–º–∏"""
        try:
            if not hasattr(self, 'list_container') or not self.list_container:
                return
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
            current_tab = self.selected_tab
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏
            if current_tab == "active":
                await self._refresh_active_list()
            elif current_tab == "sold":
                await self._refresh_sold_list()
                
        except Exception as ex:
            logger.error(f"Error recreating cards with new language: {ex}")
    
    async def _refresh_active_list(self):
        """–û–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞–π–Ω–∞ –∑ –Ω–æ–≤–∏–º–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∞–º–∏"""
        try:
            if hasattr(self, '_active_props_cache') and self._active_props_cache:
                content = await self._build_active_list(self._active_props_cache)
                if self.list_container:
                    self.list_container.content = content
        except Exception as ex:
            logger.error(f"Error refreshing active list: {ex}")
    
    async def _refresh_sold_list(self):
        """–û–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–Ω–æ–≥–æ –º–∞–π–Ω–∞ –∑ –Ω–æ–≤–∏–º–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∞–º–∏"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ–¥–∞–Ω–æ–≥–æ –º–∞–π–Ω–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            profile = self.app_state.current_profile
            if profile:
                sold_props = await self.property_service.get_properties(profile["id"], "sold")
                content = self._build_sold_list(sold_props)
                if self.list_container:
                    self.list_container.content = content
        except Exception as ex:
            logger.error(f"Error refreshing sold list: {ex}")
    
    def _update_cards_content_localization(self, content):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–Ω–æ–≤–ª—é—î –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç—ñ –∫–∞—Ä—Ç–æ–∫"""
        try:
            if hasattr(content, 'controls'):
                for control in content.controls:
                    # –û–Ω–æ–≤–ª—é—î–º–æ IconButton tooltip'–∏
                    if isinstance(control, ft.IconButton):
                        if hasattr(control, 'tooltip'):
                            if "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤ –∞–∫—Ç–∏–≤–Ω–µ" in control.tooltip:
                                control.tooltip = self.loc.get("properties_restore_to_active", default="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤ –∞–∫—Ç–∏–≤–Ω–µ")
                            elif "–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–∑–∞–≤–∂–¥–∏" in control.tooltip:
                                control.tooltip = self.loc.get("properties_delete_forever", default="–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–∑–∞–≤–∂–¥–∏")
                            elif "–ü—Ä–æ–¥–∞—Ç–∏" in control.tooltip:
                                control.tooltip = self.loc.get("properties_sell_button", default="–ü—Ä–æ–¥–∞—Ç–∏")
                            elif "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏" in control.tooltip:
                                control.tooltip = self.loc.get("properties_action_edit", default="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏")
                            elif "–í–∏–¥–∞–ª–∏—Ç–∏" in control.tooltip:
                                control.tooltip = self.loc.get("properties_action_delete", default="–í–∏–¥–∞–ª–∏—Ç–∏")
                    
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –≤–∫–ª–∞–¥–µ–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
                    elif hasattr(control, 'controls'):
                        self._update_cards_content_localization(control)
        except Exception as ex:
            logger.error(f"Error updating cards content localization: {ex}")
    
    def _update_dialog_localization(self):
        """–û–Ω–æ–≤–ª—é—î –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –≤ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –¥—ñ–∞–ª–æ–≥–∞—Ö"""
        try:
            if not self.page or not hasattr(self.page, 'overlay'):
                return
                
            # –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ AlertDialog –≤ overlay
            for overlay_item in self.page.overlay:
                if isinstance(overlay_item, ft.AlertDialog):
                    # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥—ñ–∞–ª–æ–≥—É
                    if hasattr(overlay_item, 'title') and hasattr(overlay_item.title, 'value'):
                        if "–î–æ–¥–∞—Ç–∏" in overlay_item.title.value and "–º–∞–π–Ω–æ" in overlay_item.title.value.lower():
                            overlay_item.title.value = self.loc.get("properties_add_dialog_title", default="–î–æ–¥–∞—Ç–∏ –º–∞–π–Ω–æ")
                        elif "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏" in overlay_item.title.value and "–º–∞–π–Ω–æ" in overlay_item.title.value.lower():
                            overlay_item.title.value = self.loc.get("properties_edit_dialog_title", default="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –º–∞–π–Ω–æ")
                        elif "–ü—Ä–æ–¥–∞—Ç–∏" in overlay_item.title.value and "–º–∞–π–Ω–æ" in overlay_item.title.value.lower():
                            overlay_item.title.value = self.loc.get("properties_sell_dialog_title", default="–ü—Ä–æ–¥–∞—Ç–∏ –º–∞–π–Ω–æ")
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª—è –≤–≤–æ–¥—É –≤ –¥—ñ–∞–ª–æ–∑—ñ
                    if hasattr(overlay_item, 'content') and hasattr(overlay_item.content, 'controls'):
                        self._update_dialog_content_localization(overlay_item.content)
                        
        except Exception as ex:
            logger.error(f"Error updating dialog localization: {ex}")
    
    def _update_dialog_content_localization(self, content):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–Ω–æ–≤–ª—é—î –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç—ñ –¥—ñ–∞–ª–æ–≥—É"""
        try:
            if hasattr(content, 'controls'):
                for control in content.controls:
                    # –û–Ω–æ–≤–ª—é—î–º–æ TextField
                    if isinstance(control, ft.TextField):
                        if hasattr(control, 'label'):
                            if "–ù–∞–∑–≤–∞ –º–∞–π–Ω–∞" in control.label:
                                control.label = self.loc.get("properties_name_label", default="–ù–∞–∑–≤–∞ –º–∞–π–Ω–∞")
                            elif "–¶—ñ–Ω–∞" in control.label:
                                control.label = self.loc.get("properties_price_label", default="–¶—ñ–Ω–∞")
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ Text –µ–ª–µ–º–µ–Ω—Ç–∏
                    elif isinstance(control, ft.Text):
                        if hasattr(control, 'value'):
                            if "–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥" in control.value:
                                control.value = self.loc.get("properties_preview", default="–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥:")
                            elif "–ù–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è" in control.value:
                                control.value = self.loc.get("properties_no_image", default="–ù–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
                            elif "–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä–∂—ñ" in control.value:
                                control.value = self.loc.get("properties_margin_calculation", default="–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä–∂—ñ:")
                            elif "–î–æ–¥–∞–Ω–æ:" in control.value:
                                control.value = control.value.replace("–î–æ–¥–∞–Ω–æ:", self.loc.get("properties_added_date", default="–î–æ–¥–∞–Ω–æ:"))
                            elif "–ù–µ–≤—ñ–¥–æ–º–æ" in control.value:
                                control.value = control.value.replace("–ù–µ–≤—ñ–¥–æ–º–æ", self.loc.get("properties_unknown", default="–ù–µ–≤—ñ–¥–æ–º–æ"))
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏
                    elif isinstance(control, ft.ElevatedButton):
                        if hasattr(control, 'text'):
                            if control.text == "–ó–±–µ—Ä–µ–≥—Ç–∏":
                                control.text = self.loc.get("common_save", default="–ó–±–µ—Ä–µ–≥—Ç–∏")
                            elif control.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏":
                                control.text = self.loc.get("properties_cancel", default="–°–∫–∞—Å—É–≤–∞—Ç–∏")
                            elif control.text == "–î–æ–¥–∞—Ç–∏":
                                control.text = self.loc.get("properties_add", default="–î–æ–¥–∞—Ç–∏")
                            elif control.text == "–ü—Ä–æ–¥–∞—Ç–∏":
                                control.text = self.loc.get("properties_sell", default="–ü—Ä–æ–¥–∞—Ç–∏")
                            elif control.text == "–î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ":
                                control.text = self.loc.get("properties_add_photo", default="–î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ")
                            elif control.text == "–í—Å—Ç–∞–≤–∏—Ç–∏ –∑ –±—É—Ñ–µ—Ä–∞":
                                control.text = self.loc.get("properties_paste_from_clipboard", default="–í—Å—Ç–∞–≤–∏—Ç–∏ –∑ –±—É—Ñ–µ—Ä–∞")
                    
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –≤–∫–ª–∞–¥–µ–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
                    elif hasattr(control, 'controls'):
                        self._update_dialog_content_localization(control)
                        
        except Exception as ex:
            logger.error(f"Error updating dialog content localization: {ex}")
    