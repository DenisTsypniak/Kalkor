#!/usr/bin/env python3
"""
Script –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–ª—ñ–∑—É
"""

import os
import sys
import json
import subprocess
import argparse
from datetime import datetime

def get_current_version():
    """–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω—É –≤–µ—Ä—Å—ñ—é –∑ config.py"""
    with open('src/utils/config.py', 'r', encoding='utf-8') as f:
        content = f.read()
        for line in content.split('\n'):
            if line.strip().startswith('APP_VERSION'):
                return line.split('"')[1]
    return None

def update_version_files(version):
    """–û–Ω–æ–≤–ª—é—î –≤–µ—Ä—Å—ñ—é –≤ —É—Å—ñ—Ö —Ñ–∞–π–ª–∞—Ö"""
    # –û–Ω–æ–≤–ª—é—î–º–æ config.json
    with open('config.json', 'r', encoding='utf-8') as f:
        config = json.load(f)
    config['app']['version'] = version
    with open('config.json', 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ latest_version.json
    with open('latest_version.json', 'r', encoding='utf-8') as f:
        latest = json.load(f)
    latest['version'] = version
    latest['release_date'] = datetime.now().strftime('%Y-%m-%d')
    with open('latest_version.json', 'w', encoding='utf-8') as f:
        json.dump(latest, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ –í–µ—Ä—Å—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {version}")

def create_git_tag(version):
    """–°—Ç–≤–æ—Ä—é—î git —Ç–µ–≥"""
    tag_name = f"v{version}"
    
    # –î–æ–¥–∞—î–º–æ –∑–º—ñ–Ω–∏
    subprocess.run(['git', 'add', '.'], check=True)
    subprocess.run(['git', 'commit', '-m', f'Release {tag_name}'], check=True)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–≥
    subprocess.run(['git', 'tag', tag_name], check=True)
    
    print(f"‚úÖ Git —Ç–µ–≥ {tag_name} —Å—Ç–≤–æ—Ä–µ–Ω–æ")

def push_to_github():
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∑–º—ñ–Ω–∏ –Ω–∞ GitHub"""
    subprocess.run(['git', 'push', 'origin', 'main'], check=True)
    subprocess.run(['git', 'push', 'origin', '--tags'], check=True)
    
    print("‚úÖ –ó–º—ñ–Ω–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ GitHub")

def main():
    parser = argparse.ArgumentParser(description='–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–ª—ñ–∑—É')
    parser.add_argument('--version', help='–í–µ—Ä—Å—ñ—è —Ä–µ–ª—ñ–∑—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1.1.0)')
    parser.add_argument('--no-push', action='store_true', help='–ù–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –Ω–∞ GitHub')
    
    args = parser.parse_args()
    
    if args.version:
        version = args.version
    else:
        version = get_current_version()
        if not version:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –≤–µ—Ä—Å—ñ—é")
            sys.exit(1)
    
    print(f"üöÄ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–ª—ñ–∑—É –≤–µ—Ä—Å—ñ—ó {version}")
    
    try:
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ñ–∞–π–ª–∏
        update_version_files(version)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ git —Ç–µ–≥
        create_git_tag(version)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ GitHub (—è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ --no-push)
        if not args.no_push:
            push_to_github()
            print("üéâ –†–µ–ª—ñ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–æ! GitHub Actions –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–µ—Ä–µ –¥–æ–¥–∞—Ç–æ–∫.")
        else:
            print("üìù –†–µ–ª—ñ–∑ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ. –í–∏–∫–æ–Ω–∞–π—Ç–µ 'git push origin main --tags' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()

