# --- START OF FILE run.py ---

import flet as ft
import asyncio
import aiohttp
import subprocess
import sys
import os
from packaging import version
import glob
import time
import ctypes
from ctypes import wintypes

from src.app.app_main import App
from src.data.data_manager import init_db
from src.utils.config import APP_VERSION, resource_path
from src.utils.logger import get_logger
from src.core.simple_integration import initialize_optimization_systems, dispose_optimization_systems

UPDATER_EXE_NAME = "updater.exe"
IS_BUNDLED = getattr(sys, 'frozen', False) and hasattr(sys, '_MEIPASS')

def lock_window_size():
    """–°–ø—Ä–æ—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞"""
    pass  # –¢–∏–º—á–∞—Å–æ–≤–æ –≤–∏–º–∏–∫–∞—î–º–æ Windows API –±–ª–æ–∫—É–≤–∞–Ω–Ω—è


def cleanup_old_files():
    time.sleep(1)
    current_dir = os.getcwd()
    old_files = glob.glob(os.path.join(current_dir, "*.old"))
    if not old_files: return
    for f in old_files:
        try:
            os.remove(f)
        except OSError:
            pass


async def check_for_updates(page: ft.Page) -> dict | None:
    # Fallback URLs –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
    json_urls = [
        "https://raw.githubusercontent.com/DenisTsypniak/Kalkor/main/latest_version.json",
        "https://github.com/DenisTsypniak/Kalkor/raw/main/latest_version.json",
        "https://cdn.jsdelivr.net/gh/DenisTsypniak/Kalkor@main/latest_version.json"
    ]
    
    headers = {
        'Cache-Control': 'no-cache', 
        'Pragma': 'no-cache',
        'User-Agent': 'Kalkor-Updater/1.0'
    }
    
    timeout = aiohttp.ClientTimeout(total=10)
    
    for i, json_url in enumerate(json_urls):
        try:
            print(f"üîç –°–ø—Ä–æ–±–∞ {i+1}/{len(json_urls)}: {json_url}")
            async with aiohttp.ClientSession(headers=headers, timeout=timeout) as session:
                async with session.get(json_url, params={"t": time.time()}) as response:
                    if response.status != 200: 
                        print(f"‚ö†Ô∏è HTTP {response.status} –¥–ª—è URL {i+1}")
                        continue
                    
                    try:
                        update_data = await response.json(content_type=None)
                    except Exception as json_error:
                        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON –¥–ª—è URL {i+1}: {json_error}")
                        continue
                    
                    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ JSON
                    required_fields = ["version", "url"]
                    for field in required_fields:
                        if field not in update_data:
                            print(f"‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ '{field}' –≤ JSON –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è URL {i+1}")
                            break
                    else:
                        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –∑ URL {i+1}")
                        return update_data
                        
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑ URL {i+1}: {e}")
            continue
    
    print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –∂–æ–¥–Ω–æ–≥–æ URL")
    return None


async def compare_versions(update_data: dict) -> dict | None:
    """–ü–æ—Ä—ñ–≤–Ω—é—î –≤–µ—Ä—Å—ñ—ó —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ"""
    try:
        latest_version = update_data.get("version")
        current_version = APP_VERSION
        
        print(f"üîç –ü–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è: {current_version}")
        print(f"üîç –û—Å—Ç–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ—è: {latest_version}")
        
        if version.parse(latest_version) > version.parse(current_version):
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ –≤–µ—Ä—Å—ñ—ó {latest_version}")
            return update_data
        else:
            print("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –æ—Å—Ç–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ—è")
            return None
            
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–µ—Ä—Å—ñ–π: {e}")
        return None


async def main(page: ft.Page):
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    logger = get_logger(__name__)
    logger.info("Application starting...")
    
    page.title = "Kalkor"
    page.theme_mode = ft.ThemeMode.DARK
    page.bgcolor = ft.Colors.BLACK
    page.window_width = 1400
    page.window_height = 900
    page.window_resizable = False
    page.window_maximizable = False
    page.window_minimizable = True
    page.window_full_screen = False
    page.window_always_on_top = False
    page.window_center_on_start = True  # –¶–µ–Ω—Ç—Ä—É—î–º–æ –≤—ñ–∫–Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
    page.padding = 0
    page.margin = 0
    page.spacing = 0
    page.vertical_alignment = ft.MainAxisAlignment.CENTER
    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER
    page.auto_scroll = False
    
    # –¢–∏–º—á–∞—Å–æ–≤–æ –≤–∏–º–∏–∫–∞—î–º–æ Windows API –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
    # lock_window_size()
    
    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞
    def on_window_event(e):
        if e.data == "resize":
            # –¢–∏–º—á–∞—Å–æ–≤–æ –≤–∏–º–∏–∫–∞—î–º–æ Windows API –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
            # lock_window_size()
            page.update()
    
    page.on_window_event = on_window_event
    
    # –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—É
    def on_keyboard_event(e):
        # –ë–ª–æ–∫—É—î–º–æ F11 (–ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º)
        if e.key == "F11":
            # –¢–∏–º—á–∞—Å–æ–≤–æ –≤–∏–º–∏–∫–∞—î–º–æ Windows API –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
            # lock_window_size()
            return True
        # –ë–ª–æ–∫—É—î–º–æ Ctrl+Plus/Minus (–º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è)
        if e.ctrl and (e.key == "=" or e.key =="-"):
            return True
        return False
    
    page.on_keyboard_event = on_keyboard_event
    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è

    if IS_BUNDLED:
        # --- –ë–õ–û–ö –û–ù–û–í–õ–ï–ù–ù–Ø ---
        cleanup_old_files()
        update_data = await check_for_updates(page)
        if update_data:
            update_info = await compare_versions(update_data)
            if update_info:
                try:
                    print(f"üöÄ –ó–∞–ø—É—Å–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ –≤–µ—Ä—Å—ñ—ó {update_info.get('version', 'unknown')}")
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î updater.exe
                    if not os.path.exists(UPDATER_EXE_NAME):
                        print(f"‚ùå –§–∞–π–ª {UPDATER_EXE_NAME} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                        page.controls.clear()
                        page.add(ft.Text(f"–§–∞–π–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è {UPDATER_EXE_NAME} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", color=ft.Colors.RED))
                        page.update()
                        await asyncio.sleep(5)
                        sys.exit(1)
                    
                    # –ó–∞–ø—É—Å–∫–∞—î–º–æ updater –∑ URL
                    DETACHED_PROCESS = 0x00000008
                    updater_args = [UPDATER_EXE_NAME, update_info["url"]]
                    
                    print(f"üîß –ó–∞–ø—É—Å–∫: {' '.join(updater_args)}")
                    subprocess.Popen(updater_args, creationflags=DETACHED_PROCESS, close_fds=True)
                    
                    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                    page.controls.clear()
                    page.add(ft.Text("–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø—É—â–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ...", 
                                   color=ft.Colors.WHITE, size=16, text_align=ft.TextAlign.CENTER))
                    page.update()
                    
                    # –î–∞—î–º–æ —á–∞—Å –¥–ª—è –∑–∞–ø—É—Å–∫—É updater
                    await asyncio.sleep(2)
                    sys.exit(0)
                    
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")
                    page.controls.clear()
                    page.add(ft.Text(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}", 
                                   color=ft.Colors.RED, size=16, text_align=ft.TextAlign.CENTER))
                    page.update()
                await asyncio.sleep(5)
                sys.exit(1)
            return

    # --- –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –û–°–ù–û–í–ù–û–ì–û UI ---
    page.vertical_alignment = ft.MainAxisAlignment.START
    page.horizontal_alignment = ft.CrossAxisAlignment.START

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —ñ–∫–æ–Ω–∫—É –≤—ñ–∫–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö
    try:
        icon_path = os.path.join("assets", "app_icon.ico")
        page.window_icon = resource_path(icon_path)
    except Exception as e:
        logger.warning(f"Failed to set window icon: {e}")

    await init_db()
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–∏—Å—Ç–µ–º–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
    try:
        await initialize_optimization_systems()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ")
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó: {e}")
        print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –ø–æ–≤–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º")

    try:
        app = App(page)
        await app.async_init()  # <--- –í–ò–ö–õ–ò–ö–ê–Ñ–ú–û –ê–°–ò–ù–•–†–û–ù–ù–£ –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Æ

        await app.navigate(e=None)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –µ–∫—Ä–∞–Ω
        page.update()
    except Exception as e:

        import traceback
        traceback.print_exc()
        # –î–æ–¥–∞—î–º–æ –ø—Ä–æ—Å—Ç–∏–π fallback UI
        page.controls.clear()
        page.add(ft.Text("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É", color=ft.Colors.RED))
        page.update()
    
    # –°–ø—Ä–æ—â–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞
    async def check_window_size():
        while True:
            try:
                # –¢—ñ–ª—å–∫–∏ Flet –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
                if page.window_width != 1400 or page.window_height != 900:
                    page.window_width = 1400
                    page.window_height = 900
                    page.window_resizable = False
                    page.update()
            except Exception as e:
                logger.warning(f"Failed to check window size: {e}")
            await asyncio.sleep(1)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –≤ —Ñ–æ–Ω—ñ
    asyncio.create_task(check_window_size())


if __name__ == "__main__":
    ft.app(target=main, assets_dir=".")